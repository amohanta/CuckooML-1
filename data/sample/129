{
    "info": {
        "category": "file", 
        "score": 2.8, 
        "package": "", 
        "started": "2016-02-24 04:45:54", 
        "route": "none", 
        "custom": "", 
        "machine": {
            "status": "stopped", 
            "name": "xp1", 
            "label": "xp1", 
            "manager": "VirtualBox", 
            "started_on": "2016-02-24 04:45:55", 
            "shutdown_on": "2016-02-24 04:46:12"
        }, 
        "ended": "2016-02-24 04:46:12", 
        "version": "2.0-dev", 
        "platform": "", 
        "owner": "", 
        "options": "json.calls=0", 
        "id": 129, 
        "duration": 18
    }, 
    "signatures": [
        {
            "families": [], 
            "description": "One or more processes crashed", 
            "severity": 1, 
            "marks": [
                {
                    "call": {
                        "category": "__notification__", 
                        "status": 1, 
                        "stacktrace": [], 
                        "raw": [
                            "stacktrace"
                        ], 
                        "api": "__exception__", 
                        "return_value": 0, 
                        "arguments": {
                            "stacktrace": "log_string+0x61 log_wstring-0x8d @ 0x63bc4c9a\nlog_api+0x976 log_new_process-0x3e0 @ 0x63bc5fda\nNew_advapi32_RegSetValueExA@24+0x1c8 New_advapi32_RegSetValueExW@24-0x20 @ 0x63bd10ab\n8a8b33e909ec094bd7c69853b49b1e0cf1f7d3443129150f7d7070b98be9fbdc+0x2ce1 @ 0x402ce1\n8a8b33e909ec094bd7c69853b49b1e0cf1f7d3443129150f7d7070b98be9fbdc+0x1d432 @ 0x41d432\n8a8b33e909ec094bd7c69853b49b1e0cf1f7d3443129150f7d7070b98be9fbdc+0x1d2df @ 0x41d2df\nRegisterWaitForInputIdle+0x49 BaseProcessInitPostImport-0x46c kernel32+0x16d4f @ 0x7c816d4f", 
                            "registers": {
                                "esp": 1242004, 
                                "edi": 1244952, 
                                "eax": 0, 
                                "ebp": 1242044, 
                                "edx": 4294966530, 
                                "ebx": 0, 
                                "esi": 1242716, 
                                "ecx": 1241836
                            }, 
                            "exception": {
                                "instruction_r": "89 10 c7 45 f4 04 00 00 00 eb 27 8b 55 f4 8b 45", 
                                "instruction": "mov dword ptr [eax], edx", 
                                "exception_code": "0xc0000005", 
                                "symbol": "utf8_string+0x32 utf8_wstring-0x4f", 
                                "address": "0x63bcca46"
                            }
                        }, 
                        "time": 1456289942.0, 
                        "tid": 616, 
                        "flags": {}
                    }, 
                    "pid": 612, 
                    "type": "call", 
                    "cid": 356
                }
            ], 
            "references": [], 
            "name": "raises_exception"
        }, 
        {
            "families": [], 
            "description": "One or more potentially interesting buffers were extracted, these generally contain injected code, configuration data, etc.", 
            "severity": 2, 
            "marks": [], 
            "references": [], 
            "name": "dumped_buffer"
        }, 
        {
            "families": [], 
            "description": "Allocates read-write-execute memory (usually to unpack itself)", 
            "severity": 2, 
            "marks": [
                {
                    "call": {
                        "category": "process", 
                        "status": 1, 
                        "stacktrace": [], 
                        "api": "NtAllocateVirtualMemory", 
                        "return_value": 0, 
                        "arguments": {
                            "region_size": 307200, 
                            "protection": 64, 
                            "process_handle": "0x00000040", 
                            "allocation_type": 12288, 
                            "base_address": "0x00400000"
                        }, 
                        "time": 1456289927.0, 
                        "tid": 616, 
                        "flags": {
                            "protection": "PAGE_EXECUTE_READWRITE", 
                            "allocation_type": "MEM_COMMIT|MEM_RESERVE"
                        }
                    }, 
                    "pid": 612, 
                    "type": "call", 
                    "cid": 341
                }, 
                {
                    "call": {
                        "category": "process", 
                        "status": 1, 
                        "stacktrace": [], 
                        "api": "NtAllocateVirtualMemory", 
                        "return_value": 0, 
                        "arguments": {
                            "region_size": 4096, 
                            "protection": 64, 
                            "process_handle": "0xffffffff", 
                            "allocation_type": 4096, 
                            "base_address": "0x00b30000"
                        }, 
                        "time": 1456290099.375, 
                        "tid": 748, 
                        "flags": {
                            "protection": "PAGE_EXECUTE_READWRITE", 
                            "allocation_type": "MEM_COMMIT"
                        }
                    }, 
                    "pid": 644, 
                    "type": "call", 
                    "cid": 41
                }
            ], 
            "references": [], 
            "name": "allocates_rwx"
        }, 
        {
            "families": [], 
            "description": "Creates (office) documents on the filesystem", 
            "severity": 2, 
            "marks": [
                {
                    "category": "file", 
                    "ioc": "C:\\Documents and Settings\\Administrator\\Local Settings\\Temp\\pdf-001.pdf", 
                    "type": "ioc"
                }
            ], 
            "references": [], 
            "name": "creates_doc"
        }, 
        {
            "families": [], 
            "description": "File has been identified by at least one AntiVirus on VirusTotal as malicious", 
            "severity": 2, 
            "marks": [
                {
                    "positives": 27, 
                    "type": "generic"
                }
            ], 
            "references": [], 
            "name": "antivirus_virustotal"
        }, 
        {
            "families": [], 
            "description": "Executed a process and injected code into it, probably while unpacking", 
            "severity": 5, 
            "marks": [
                {
                    "call": {
                        "category": "process", 
                        "status": 1, 
                        "stacktrace": [], 
                        "api": "CreateProcessInternalW", 
                        "return_value": 1, 
                        "arguments": {
                            "thread_identifier": 748, 
                            "thread_handle": "0x00000044", 
                            "process_identifier": 644, 
                            "current_directory": "", 
                            "filepath": "C:\\Documents and Settings\\Administrator\\Local Settings\\Temp\\pdf-001.pdf", 
                            "command_line": "", 
                            "filepath_r": "C:\\DOCUME~1\\ADMINI~1\\LOCALS~1\\Temp\\pdf-001.pdf", 
                            "creation_flags": 4, 
                            "process_handle": "0x00000040", 
                            "inherit_handles": 0
                        }, 
                        "time": 1456289911.0, 
                        "tid": 616, 
                        "flags": {
                            "creation_flags": "CREATE_SUSPENDED"
                        }
                    }, 
                    "pid": 612, 
                    "type": "call", 
                    "cid": 334
                }, 
                {
                    "call": {
                        "category": "process", 
                        "status": 1, 
                        "stacktrace": [], 
                        "api": "NtGetContextThread", 
                        "return_value": 0, 
                        "arguments": {
                            "thread_handle": "0x00000044"
                        }, 
                        "time": 1456289927.0, 
                        "tid": 616, 
                        "flags": {}
                    }, 
                    "pid": 612, 
                    "type": "call", 
                    "cid": 336
                }, 
                {
                    "call": {
                        "category": "process", 
                        "status": 1, 
                        "stacktrace": [], 
                        "api": "NtUnmapViewOfSection", 
                        "return_value": 0, 
                        "arguments": {
                            "region_size": 4096, 
                            "base_address": "0x00400000", 
                            "process_handle": "0x00000040"
                        }, 
                        "time": 1456289927.0, 
                        "tid": 616, 
                        "flags": {}
                    }, 
                    "pid": 612, 
                    "type": "call", 
                    "cid": 340
                }, 
                {
                    "call": {
                        "category": "process", 
                        "status": 1, 
                        "stacktrace": [], 
                        "api": "NtAllocateVirtualMemory", 
                        "return_value": 0, 
                        "arguments": {
                            "region_size": 307200, 
                            "protection": 64, 
                            "process_handle": "0x00000040", 
                            "allocation_type": 12288, 
                            "base_address": "0x00400000"
                        }, 
                        "time": 1456289927.0, 
                        "tid": 616, 
                        "flags": {
                            "protection": "PAGE_EXECUTE_READWRITE", 
                            "allocation_type": "MEM_COMMIT|MEM_RESERVE"
                        }
                    }, 
                    "pid": 612, 
                    "type": "call", 
                    "cid": 341
                }, 
                {
                    "call": {
                        "category": "process", 
                        "status": 1, 
                        "stacktrace": [], 
                        "api": "WriteProcessMemory", 
                        "return_value": 1, 
                        "arguments": {
                            "buffer": "MZP\u0000\u0002\u0000\u0000\u0000\u0004\u0000\u000f\u0000\u00ff\u00ff\u0000\u0000\u00b8\u0000\u0000\u0000\u0000\u0000\u0000\u0000@\u0000\u001a\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u00ba\u0010\u0000\u000e\u001f\u00b4\t\u00cd!\u00b8\u0001L\u00cd!\u0090\u0090This program must be run under Win32\r\n$7\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000PE\u0000\u0000L\u0001\b\u0000\u0019^B*\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u00e0\u0000\u008e\u0081\u000b\u0001\u0002\u0019\u0000\u00f8\u0002\u0000\u0000>\u0001\u0000\u0000\u0000\u0000\u0000d\u0004\u0003\u0000\u0000\u0010\u0000\u0000\u0000\u0010\u0003\u0000\u0000\u0000@\u0000\u0000\u0010\u0000\u0000\u0000\u0002\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u00b0\u0004\u0000\u0000\u0004\u0000\u0000\u00a1\u00f5\u0003\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0010\u0000\u0000@\u0000\u0000\u0000\u0000\u0010\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0080\u0003\u0000\u00f6\u0019\u0000\u0000\u0000\u00f0\u0003\u0000\u0014\u00bd\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u00c0\u0003\u0000\u0010$\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u00b0\u0003\u0000\u0018\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000CODE\u0000\u0000\u0000\u0000\u00a0\u00f7\u0002\u0000\u0000\u0010\u0000\u0000\u0000\u00f8\u0002\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0000\u0000`DATA\u0000\u0000\u0000\u0000T=\u0000\u0000\u0000\u0010\u0003\u0000\u0000>\u0000\u0000\u0000\u00fc\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000@\u0000\u0000\u00c0BSS\u0000\u0000\u0000\u0000\u0000\u00d5(\u0000\u0000\u0000P\u0003\u0000\u0000\u0000\u0000\u0000\u0000:\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u00c0.idata\u0000\u0000\u00f6\u0019\u0000\u0000\u0000\u0080\u0003\u0000\u0000\u001a\u0000\u0000\u0000:\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000@\u0000\u0000\u00c0.tls\u0000\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u00a0\u0003\u0000\u0000\u0000\u0000\u0000\u0000T\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u00c0.rdata\u0000\u0000\u0018\u0000\u0000\u0000\u0000\u00b0\u0003\u0000\u0000\u0002\u0000\u0000\u0000T\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000@\u0000\u0000P.reloc\u0000\u0000\u0010$\u0000\u0000\u0000\u00c0\u0003\u0000\u0000&\u0000\u0000\u0000V\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000@\u0000\u0000P.rsrc\u0000\u0000\u0000\u0014\u00bd\u0000\u0000\u0000\u00f0\u0003\u0000\u0000\u00be\u0000\u0000\u0000|\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000@\u0000\u0000P\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u009c\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000@\u0000\u0000P\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", 
                            "base_address": "0x00400000", 
                            "process_handle": "0x00000040"
                        }, 
                        "time": 1456289927.0, 
                        "tid": 616, 
                        "flags": {}
                    }, 
                    "pid": 612, 
                    "type": "call", 
                    "cid": 342
                }, 
                {
                    "call": {
                        "category": "process", 
                        "status": 1, 
                        "stacktrace": [], 
                        "buffer": "326d51ccb8bc081b10f8db531339bebcda5f1801", 
                        "api": "WriteProcessMemory", 
                        "return_value": 1, 
                        "arguments": {
                            "buffer": "", 
                            "base_address": "0x00401000", 
                            "process_handle": "0x00000040"
                        }, 
                        "time": 1456289927.0, 
                        "tid": 616, 
                        "flags": {}
                    }, 
                    "pid": 612, 
                    "type": "call", 
                    "cid": 343
                }, 
                {
                    "call": {
                        "category": "process", 
                        "status": 1, 
                        "stacktrace": [], 
                        "buffer": "a72a7581523d7fe94a9bb73ba9396eb44c24961d", 
                        "api": "WriteProcessMemory", 
                        "return_value": 1, 
                        "arguments": {
                            "buffer": "", 
                            "base_address": "0x00431000", 
                            "process_handle": "0x00000040"
                        }, 
                        "time": 1456289942.0, 
                        "tid": 616, 
                        "flags": {}
                    }, 
                    "pid": 612, 
                    "type": "call", 
                    "cid": 344
                }, 
                {
                    "call": {
                        "category": "process", 
                        "status": 0, 
                        "stacktrace": [], 
                        "last_error": 87, 
                        "nt_status": -1073741583, 
                        "api": "WriteProcessMemory", 
                        "return_value": 0, 
                        "arguments": {
                            "buffer": "", 
                            "base_address": "0x00435000", 
                            "process_handle": "0x00000040"
                        }, 
                        "time": 1456289942.0, 
                        "tid": 616, 
                        "flags": {}
                    }, 
                    "pid": 612, 
                    "type": "call", 
                    "cid": 345
                }, 
                {
                    "call": {
                        "category": "process", 
                        "status": 1, 
                        "stacktrace": [], 
                        "buffer": "d2464745f9a03304a70c45233bcd3c82774b7f35", 
                        "api": "WriteProcessMemory", 
                        "return_value": 1, 
                        "arguments": {
                            "buffer": "", 
                            "base_address": "0x00438000", 
                            "process_handle": "0x00000040"
                        }, 
                        "time": 1456289942.0, 
                        "tid": 616, 
                        "flags": {}
                    }, 
                    "pid": 612, 
                    "type": "call", 
                    "cid": 346
                }, 
                {
                    "call": {
                        "category": "process", 
                        "status": 0, 
                        "stacktrace": [], 
                        "last_error": 87, 
                        "nt_status": -1073741583, 
                        "api": "WriteProcessMemory", 
                        "return_value": 0, 
                        "arguments": {
                            "buffer": "", 
                            "base_address": "0x0043a000", 
                            "process_handle": "0x00000040"
                        }, 
                        "time": 1456289942.0, 
                        "tid": 616, 
                        "flags": {}
                    }, 
                    "pid": 612, 
                    "type": "call", 
                    "cid": 347
                }, 
                {
                    "call": {
                        "category": "process", 
                        "status": 1, 
                        "stacktrace": [], 
                        "api": "WriteProcessMemory", 
                        "return_value": 1, 
                        "arguments": {
                            "buffer": "\u0000\u00a0C\u0000\u0010\u00a0C\u0000x\u0010C\u0000\u0010\u00b0C\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", 
                            "base_address": "0x0043b000", 
                            "process_handle": "0x00000040"
                        }, 
                        "time": 1456289942.0, 
                        "tid": 616, 
                        "flags": {}
                    }, 
                    "pid": 612, 
                    "type": "call", 
                    "cid": 348
                }, 
                {
                    "call": {
                        "category": "process", 
                        "status": 1, 
                        "stacktrace": [], 
                        "buffer": "c28ddb2f63bf6b7ee2bdca665e6598822bc187c3", 
                        "api": "WriteProcessMemory", 
                        "return_value": 1, 
                        "arguments": {
                            "buffer": "", 
                            "base_address": "0x0043c000", 
                            "process_handle": "0x00000040"
                        }, 
                        "time": 1456289942.0, 
                        "tid": 616, 
                        "flags": {}
                    }, 
                    "pid": 612, 
                    "type": "call", 
                    "cid": 349
                }, 
                {
                    "call": {
                        "category": "process", 
                        "status": 1, 
                        "stacktrace": [], 
                        "buffer": "331fd974e3ee7f2af8705967ab23b03139194e5f", 
                        "api": "WriteProcessMemory", 
                        "return_value": 1, 
                        "arguments": {
                            "buffer": "", 
                            "base_address": "0x0043f000", 
                            "process_handle": "0x00000040"
                        }, 
                        "time": 1456289942.0, 
                        "tid": 616, 
                        "flags": {}
                    }, 
                    "pid": 612, 
                    "type": "call", 
                    "cid": 350
                }, 
                {
                    "call": {
                        "category": "process", 
                        "status": 1, 
                        "stacktrace": [], 
                        "api": "WriteProcessMemory", 
                        "return_value": 1, 
                        "arguments": {
                            "buffer": "\u0000\u0000@\u0000", 
                            "base_address": "0x7ffdc008", 
                            "process_handle": "0x00000040"
                        }, 
                        "time": 1456289942.0, 
                        "tid": 616, 
                        "flags": {}
                    }, 
                    "pid": 612, 
                    "type": "call", 
                    "cid": 351
                }, 
                {
                    "call": {
                        "category": "process", 
                        "status": 1, 
                        "stacktrace": [], 
                        "api": "NtSetContextThread", 
                        "return_value": 0, 
                        "arguments": {
                            "thread_handle": "0x00000044", 
                            "registers": {
                                "eip": 2088831079, 
                                "esp": 2293756, 
                                "edi": 0, 
                                "eax": 4392036, 
                                "ebp": 0, 
                                "edx": 128, 
                                "ebx": 2147336192, 
                                "esi": 4096, 
                                "ecx": 22
                            }
                        }, 
                        "time": 1456289942.0, 
                        "tid": 616, 
                        "flags": {}
                    }, 
                    "pid": 612, 
                    "type": "call", 
                    "cid": 352
                }, 
                {
                    "call": {
                        "category": "process", 
                        "status": 1, 
                        "stacktrace": [], 
                        "api": "NtResumeThread", 
                        "return_value": 0, 
                        "arguments": {
                            "thread_handle": "0x00000044", 
                            "suspend_count": 1
                        }, 
                        "time": 1456289942.0, 
                        "tid": 616, 
                        "flags": {}
                    }, 
                    "pid": 612, 
                    "type": "call", 
                    "cid": 353
                }
            ], 
            "references": [], 
            "name": "injection_runpe"
        }
    ], 
    "target": {
        "category": "file", 
        "file": {
            "yara": [], 
            "sha1": "96d89530002f5d451196b3a6225fe9c905422dcc", 
            "name": "8a8b33e909ec094bd7c69853b49b1e0cf1f7d3443129150f7d7070b98be9fbdc", 
            "type": "PE32 executable (GUI) Intel 80386, for MS Windows", 
            "sha256": "8a8b33e909ec094bd7c69853b49b1e0cf1f7d3443129150f7d7070b98be9fbdc", 
            "urls": [], 
            "crc32": "B99F4823", 
            "path": "/home/cuckoo/cuckoo/storage/binaries/8a8b33e909ec094bd7c69853b49b1e0cf1f7d3443129150f7d7070b98be9fbdc", 
            "ssdeep": "12288:0I6RUmXKxvO1JH+8COh0XvRauoQpdwMIrj7Q0cq4uUkqpYCDsgWlVMn1O1/dJFw3:0XKxvOnPCOhduoQY00cSq/DVZnIpFfYf", 
            "size": 1066514, 
            "sha512": "c5fc7fe4a908971d1145ca812676687092727f61b69c32afd2cc1113e708517876ce5eaec176bde00bf46fac7157d16df389f98814ba4f2047fb22b51ce3c68f", 
            "md5": "ad9ffb7840e6917fd8ec88a76334883d"
        }
    }, 
    "buffer": [
        {
            "yara": [
                {
                    "meta": {
                        "description": "A non-Windows executable contains win32 API functions names", 
                        "author": "nex"
                    }, 
                    "name": "embedded_win_api", 
                    "strings": [
                        "GetTempPath", 
                        "LoadLibraryA", 
                        "SetFilePointer", 
                        "WriteFile", 
                        "IsBadReadPtr", 
                        "ShellExecute", 
                        "CreateFileA", 
                        "GetProcAddress", 
                        "GetSystemDirectoryA", 
                        "WinExec", 
                        "GetWindowsDirectory"
                    ]
                }
            ], 
            "sha1": "d2464745f9a03304a70c45233bcd3c82774b7f35", 
            "name": "d2464745f9a03304a70c45233bcd3c82774b7f35", 
            "type": "data", 
            "sha256": "efd4dca43e2c1616eb6876b3dcae83cef5d12922f73e39ef5c0194ff578c2239", 
            "urls": [], 
            "crc32": "360B312E", 
            "path": "/home/cuckoo/cuckoo/storage/analyses/129/buffer/d2464745f9a03304a70c45233bcd3c82774b7f35", 
            "ssdeep": "192:jPA+YMvR1AAH3jZ+1TskBme9bHHvhwFO+CT/XtU2AOdbf4MbD4RIVWoTm3Fm41Tx:jYMvbAi8TskBzKnjG7TMZ", 
            "size": 6656, 
            "sha512": "0e1b5ccb1b5adb930de46f989078b7c8e95e1c6891064ef523b7bbb9879105944267e50277d9aacdee210595732421c0617cdf91c7a17519949153e55c887bd7", 
            "md5": "da2d0b744cc39e5f1ac1ef1775165a44"
        }, 
        {
            "yara": [], 
            "sha1": "a72a7581523d7fe94a9bb73ba9396eb44c24961d", 
            "name": "a72a7581523d7fe94a9bb73ba9396eb44c24961d", 
            "type": "data", 
            "sha256": "a9f6421336b1c380d6e9c74d7fac236f50a8aae7f438a8a0a39de8bd5b5aaab1", 
            "urls": [], 
            "crc32": "06B7DA82", 
            "path": "/home/cuckoo/cuckoo/storage/analyses/129/buffer/a72a7581523d7fe94a9bb73ba9396eb44c24961d", 
            "ssdeep": "384:0m4i/jwHxXvjX3hwlHt6oIfESxOwHrrd:0UcnToIf11d", 
            "size": 15872, 
            "sha512": "66c0e79adbe1cf0a41e4de6cb722763482d1c8b72f3e188114bfc2e4bcfae802c7362eb2ce6f420ff2e45c48d478b9b94ba06487311ddcc104033fd0e93e0a09", 
            "md5": "95d4563ee20c9ed9f137b19cd024f04e"
        }, 
        {
            "yara": [
                {
                    "meta": {
                        "description": "Contains an embedded PE32 file", 
                        "author": "nex"
                    }, 
                    "name": "embedded_pe", 
                    "strings": [
                        "This program", 
                        "MZ"
                    ]
                }, 
                {
                    "meta": {
                        "description": "A non-Windows executable contains win32 API functions names", 
                        "author": "nex"
                    }, 
                    "name": "embedded_win_api", 
                    "strings": [
                        "SetFilePointer", 
                        "WriteFile", 
                        "CreateFileA", 
                        "GetProcAddress", 
                        "GetWindowsDirectory", 
                        "LoadLibraryA", 
                        "WinExec", 
                        "MZ"
                    ]
                }, 
                {
                    "meta": {
                        "description": "Matched shellcode byte patterns", 
                        "author": "nex"
                    }, 
                    "name": "shellcode", 
                    "strings": [
                        "{ 8B EC 83 C4 }", 
                        "MZ"
                    ]
                }
            ], 
            "sha1": "331fd974e3ee7f2af8705967ab23b03139194e5f", 
            "name": "331fd974e3ee7f2af8705967ab23b03139194e5f", 
            "type": "data", 
            "sha256": "ec5286fbaeb2f88657a4a718f121ee03b5a1768620d1a9b4a2f768c9d38b3331", 
            "urls": [], 
            "crc32": "47D29AD5", 
            "path": "/home/cuckoo/cuckoo/storage/analyses/129/buffer/331fd974e3ee7f2af8705967ab23b03139194e5f", 
            "ssdeep": "768:4L0532BD+aoi6qZOpQB5ZpOc06HCMN9GT6RJ5BHUEy2YEZZEoT:4L0532R+av6qZ4QxpP0AtNfRJ5BHxYU", 
            "size": 48640, 
            "sha512": "6085e736fc37a511fd33bd4a12638b99dd0c88e8010b4bfde5cab91d46c1f2864a39826a0e70ceb2472fa29b99b1448c5552d3d255b7206ca13aa0cf0291119f", 
            "md5": "ce915d5981e17fe32300c2cdebc983e8"
        }, 
        {
            "yara": [
                {
                    "meta": {
                        "description": "Matched shellcode byte patterns", 
                        "author": "nex"
                    }, 
                    "name": "shellcode", 
                    "strings": [
                        "{ 8B EC 83 C4 }", 
                        "{ 8B EC E8 }", 
                        "MZ"
                    ]
                }
            ], 
            "sha1": "326d51ccb8bc081b10f8db531339bebcda5f1801", 
            "name": "326d51ccb8bc081b10f8db531339bebcda5f1801", 
            "type": "data", 
            "sha256": "e99026d9ace468e56192974557ce577b6464bc840c3da0292fab4f23ae3f45a1", 
            "urls": [
                "http://www.turkojan.com"
            ], 
            "crc32": "3438BE91", 
            "path": "/home/cuckoo/cuckoo/storage/analyses/129/buffer/326d51ccb8bc081b10f8db531339bebcda5f1801", 
            "ssdeep": "3072:0Gvo6giwpW9DGD2VdKvY/gIg/CtTIuOmxkiozXgeXd:0G377xS2Vp2CeiorX", 
            "size": 194560, 
            "sha512": "8353cf21a61fd226b33f3e2ae70b664b3804ac24968998484943ae188e57873b14b2cdc1e9e348fc6e35bde9c2348941d11ab6ba149e7fcc3be3d18b8d045910", 
            "md5": "74fe8fbd7b58631bf98ec6647c753b40"
        }, 
        {
            "yara": [], 
            "sha1": "c28ddb2f63bf6b7ee2bdca665e6598822bc187c3", 
            "name": "c28ddb2f63bf6b7ee2bdca665e6598822bc187c3", 
            "type": "data", 
            "sha256": "21cd619b2c9816359307e684c4aa6cf271ea6b78a7fb94c156277372f3a159c1", 
            "urls": [], 
            "crc32": "8FF2D70B", 
            "path": "/home/cuckoo/cuckoo/storage/analyses/129/buffer/c28ddb2f63bf6b7ee2bdca665e6598822bc187c3", 
            "ssdeep": "192:oxkXcjA2d8PBrezDScla1xeOCSLbfBewD0Zgxey:g0cUk88DScla1XBn0TZUe", 
            "size": 9728, 
            "sha512": "567cf0a84ff3dfa236e216a3d85b22b188ca9078ad88578df2562c540f2067a7d0539febdc6dfd2acda858aa4c363964710ab920f2990342cbb33c219c700ce0", 
            "md5": "58dde67bc9c4b75341fc2ff1fa78da87"
        }
    ], 
    "virustotal": {
        "scans": {
            "Bkav": {
                "detected": false, 
                "version": "1.3.0.7237", 
                "result": null, 
                "normalized": [], 
                "update": "20151005"
            }, 
            "TotalDefense": {
                "detected": false, 
                "version": "37.1.62.1", 
                "result": null, 
                "normalized": [], 
                "update": "20151006"
            }, 
            "MicroWorld-eScan": {
                "detected": true, 
                "version": "12.0.250.0", 
                "result": "Gen:Variant.Graftor.240618", 
                "normalized": [
                    "Graftor"
                ], 
                "update": "20151006"
            }, 
            "nProtect": {
                "detected": false, 
                "version": "2015-10-05.01", 
                "result": null, 
                "normalized": [], 
                "update": "20151005"
            }, 
            "CMC": {
                "detected": false, 
                "version": "1.1.0.977", 
                "result": null, 
                "normalized": [], 
                "update": "20151005"
            }, 
            "CAT-QuickHeal": {
                "detected": false, 
                "version": "14.00", 
                "result": null, 
                "normalized": [], 
                "update": "20151005"
            }, 
            "ALYac": {
                "detected": true, 
                "version": "1.0.1.4", 
                "result": "Gen:Variant.Graftor.240618", 
                "normalized": [
                    "Graftor"
                ], 
                "update": "20151006"
            }, 
            "Malwarebytes": {
                "detected": true, 
                "version": "2.1.1.1115", 
                "result": "Backdoor.Injector.PDF", 
                "normalized": [], 
                "update": "20151005"
            }, 
            "VIPRE": {
                "detected": false, 
                "version": "44322", 
                "result": null, 
                "normalized": [], 
                "update": "20151006"
            }, 
            "K7AntiVirus": {
                "detected": true, 
                "version": "9.210.17432", 
                "result": "Trojan ( 004ce1991 )", 
                "normalized": [], 
                "update": "20151005"
            }, 
            "Alibaba": {
                "detected": false, 
                "version": "1.0", 
                "result": null, 
                "normalized": [], 
                "update": "20150927"
            }, 
            "K7GW": {
                "detected": true, 
                "version": "9.210.17433", 
                "result": "Trojan ( 004ce1991 )", 
                "normalized": [], 
                "update": "20151006"
            }, 
            "TheHacker": {
                "detected": true, 
                "version": "6.8.0.5.691", 
                "result": "Trojan/Injector.chqg", 
                "normalized": [
                    "chqg"
                ], 
                "update": "20151006"
            }, 
            "NANO-Antivirus": {
                "detected": true, 
                "version": "0.30.26.3725", 
                "result": "Trojan.Win32.Androm.dvszls", 
                "normalized": [
                    "Androm", 
                    "dvszls"
                ], 
                "update": "20151006"
            }, 
            "F-Prot": {
                "detected": false, 
                "version": "4.7.1.166", 
                "result": null, 
                "normalized": [], 
                "update": "20151006"
            }, 
            "Symantec": {
                "detected": false, 
                "version": "20141.2.0.56", 
                "result": null, 
                "normalized": [], 
                "update": "20151005"
            }, 
            "ESET-NOD32": {
                "detected": true, 
                "version": "12362", 
                "result": "a variant of Win32/Injector.CHQG", 
                "normalized": [
                    "CHQG"
                ], 
                "update": "20151006"
            }, 
            "TrendMicro-HouseCall": {
                "detected": false, 
                "version": "9.800.0.1009", 
                "result": null, 
                "normalized": [], 
                "update": "20151006"
            }, 
            "Avast": {
                "detected": true, 
                "version": "8.0.1489.320", 
                "result": "Win32:Malware-gen", 
                "normalized": [], 
                "update": "20151006"
            }, 
            "ClamAV": {
                "detected": true, 
                "version": "0.98.5.0", 
                "result": "Win.Trojan.Graftor-3775", 
                "normalized": [
                    "Graftor"
                ], 
                "update": "20151006"
            }, 
            "Kaspersky": {
                "detected": true, 
                "version": "15.0.1.10", 
                "result": "Backdoor.Win32.Androm.hzbx", 
                "normalized": [
                    "Androm", 
                    "hzbx"
                ], 
                "update": "20151006"
            }, 
            "BitDefender": {
                "detected": true, 
                "version": "7.2", 
                "result": "Gen:Variant.Graftor.240618", 
                "normalized": [
                    "Graftor"
                ], 
                "update": "20151006"
            }, 
            "Agnitum": {
                "detected": true, 
                "version": "5.5.1.3", 
                "result": "Trojan.Injector!dRlWyn5901k", 
                "normalized": [
                    "dRlWyn5901k"
                ], 
                "update": "20151004"
            }, 
            "ViRobot": {
                "detected": false, 
                "version": "2014.3.20.0", 
                "result": null, 
                "normalized": [], 
                "update": "20151006"
            }, 
            "SUPERAntiSpyware": {
                "detected": false, 
                "version": "5.6.0.1032", 
                "result": null, 
                "normalized": [], 
                "update": "20151006"
            }, 
            "Rising": {
                "detected": false, 
                "version": "25.0.0.17", 
                "result": null, 
                "normalized": [], 
                "update": "20151005"
            }, 
            "Ad-Aware": {
                "detected": true, 
                "version": "12.0.163.0", 
                "result": "Gen:Variant.Graftor.240618", 
                "normalized": [
                    "Graftor"
                ], 
                "update": "20151006"
            }, 
            "Sophos": {
                "detected": false, 
                "version": "4.98.0", 
                "result": null, 
                "normalized": [], 
                "update": "20151006"
            }, 
            "Comodo": {
                "detected": false, 
                "version": "23363", 
                "result": null, 
                "normalized": [], 
                "update": "20151006"
            }, 
            "F-Secure": {
                "detected": true, 
                "version": "11.0.19100.45", 
                "result": "Gen:Variant.Graftor.240618", 
                "normalized": [
                    "Graftor"
                ], 
                "update": "20151006"
            }, 
            "DrWeb": {
                "detected": true, 
                "version": "7.0.15.8310", 
                "result": "Trojan.Betabot.3", 
                "normalized": [
                    "Betabot"
                ], 
                "update": "20151006"
            }, 
            "Zillya": {
                "detected": true, 
                "version": "2.0.0.2429", 
                "result": "Backdoor.Androm.Win32.25491", 
                "normalized": [
                    "Androm"
                ], 
                "update": "20151005"
            }, 
            "TrendMicro": {
                "detected": true, 
                "version": "9.740.0.1012", 
                "result": "TROJ_GEN.R00XC0DJ515", 
                "normalized": [
                    "R00XC0DJ515"
                ], 
                "update": "20151006"
            }, 
            "McAfee-GW-Edition": {
                "detected": false, 
                "version": "v2015", 
                "result": null, 
                "normalized": [], 
                "update": "20151006"
            }, 
            "Emsisoft": {
                "detected": true, 
                "version": "3.5.0.642", 
                "result": "Gen:Variant.Graftor.240618 (B)", 
                "normalized": [
                    "Graftor"
                ], 
                "update": "20151006"
            }, 
            "Cyren": {
                "detected": false, 
                "version": "5.4.16.7", 
                "result": null, 
                "normalized": [], 
                "update": "20151006"
            }, 
            "Jiangmin": {
                "detected": true, 
                "version": "16.0.100", 
                "result": "Backdoor/Androm.sed", 
                "normalized": [
                    "Androm"
                ], 
                "update": "20151005"
            }, 
            "Avira": {
                "detected": false, 
                "version": "8.3.2.2", 
                "result": null, 
                "normalized": [], 
                "update": "20151006"
            }, 
            "Antiy-AVL": {
                "detected": true, 
                "version": "1.0.0.1", 
                "result": "Trojan[Backdoor]/Win32.Androm.hzbx", 
                "normalized": [
                    "Androm", 
                    "hzbx"
                ], 
                "update": "20151006"
            }, 
            "Kingsoft": {
                "detected": false, 
                "version": "2013.4.9.267", 
                "result": null, 
                "normalized": [], 
                "update": "20151006"
            }, 
            "Microsoft": {
                "detected": true, 
                "version": "1.1.12101.0", 
                "result": "Trojan:Win32/Dorv.A!rfn", 
                "normalized": [
                    "Dorv"
                ], 
                "update": "20151005"
            }, 
            "Arcabit": {
                "detected": true, 
                "version": "1.0.0.568", 
                "result": "Trojan.Graftor.D3ABEA", 
                "normalized": [
                    "Graftor"
                ], 
                "update": "20151006"
            }, 
            "AegisLab": {
                "detected": false, 
                "version": "1.5", 
                "result": null, 
                "normalized": [], 
                "update": "20151005"
            }, 
            "AhnLab-V3": {
                "detected": false, 
                "version": "2015.10.06.00", 
                "result": null, 
                "normalized": [], 
                "update": "20151005"
            }, 
            "GData": {
                "detected": true, 
                "version": "25", 
                "result": "Gen:Variant.Graftor.240618", 
                "normalized": [
                    "Graftor"
                ], 
                "update": "20151006"
            }, 
            "ByteHero": {
                "detected": false, 
                "version": "1.0.0.1", 
                "result": null, 
                "normalized": [], 
                "update": "20151006"
            }, 
            "McAfee": {
                "detected": false, 
                "version": "6.0.6.653", 
                "result": null, 
                "normalized": [], 
                "update": "20151006"
            }, 
            "AVware": {
                "detected": false, 
                "version": "1.5.0.21", 
                "result": null, 
                "normalized": [], 
                "update": "20151006"
            }, 
            "VBA32": {
                "detected": true, 
                "version": "3.12.26.4", 
                "result": "Backdoor.Androm", 
                "normalized": [
                    "Androm"
                ], 
                "update": "20151005"
            }, 
            "Panda": {
                "detected": true, 
                "version": "4.6.4.2", 
                "result": "Trj/Genetic.gen", 
                "normalized": [
                    "Genetic"
                ], 
                "update": "20151005"
            }, 
            "Zoner": {
                "detected": false, 
                "version": "1.0", 
                "result": null, 
                "normalized": [], 
                "update": "20151006"
            }, 
            "Tencent": {
                "detected": false, 
                "version": "1.0.0.1", 
                "result": null, 
                "normalized": [], 
                "update": "20151006"
            }, 
            "Ikarus": {
                "detected": false, 
                "version": "T3.1.9.5.0", 
                "result": null, 
                "normalized": [], 
                "update": "20151006"
            }, 
            "Fortinet": {
                "detected": false, 
                "version": "5.1.220.0", 
                "result": null, 
                "normalized": [], 
                "update": "20151006"
            }, 
            "AVG": {
                "detected": true, 
                "version": "16.0.0.4435", 
                "result": "Inject3.DCL", 
                "normalized": [
                    "Inject3"
                ], 
                "update": "20151006"
            }, 
            "Baidu-International": {
                "detected": false, 
                "version": "3.5.1.41473", 
                "result": null, 
                "normalized": [], 
                "update": "20151005"
            }, 
            "Qihoo-360": {
                "detected": false, 
                "version": "1.0.0.1015", 
                "result": null, 
                "normalized": [], 
                "update": "20151006"
            }
        }, 
        "scan_id": "8a8b33e909ec094bd7c69853b49b1e0cf1f7d3443129150f7d7070b98be9fbdc-1444110465", 
        "sha1": "96d89530002f5d451196b3a6225fe9c905422dcc", 
        "resource": "ad9ffb7840e6917fd8ec88a76334883d", 
        "response_code": 1, 
        "scan_date": "2015-10-06 05:47:45", 
        "permalink": "https://www.virustotal.com/file/8a8b33e909ec094bd7c69853b49b1e0cf1f7d3443129150f7d7070b98be9fbdc/analysis/1444110465/", 
        "summary": {
            "positives": 27, 
            "permalink": "https://www.virustotal.com/file/8a8b33e909ec094bd7c69853b49b1e0cf1f7d3443129150f7d7070b98be9fbdc/analysis/1444110465/", 
            "scan_date": "2015-10-06 05:47:45"
        }, 
        "sha256": "8a8b33e909ec094bd7c69853b49b1e0cf1f7d3443129150f7d7070b98be9fbdc", 
        "normalized": [
            "Graftor", 
            "chqg", 
            "Androm", 
            "dvszls", 
            "hzbx", 
            "dRlWyn5901k", 
            "Betabot", 
            "R00XC0DJ515", 
            "Dorv", 
            "Genetic", 
            "Inject3"
        ], 
        "total": 57, 
        "positives": 27, 
        "verbose_msg": "Scan finished, information embedded", 
        "md5": "ad9ffb7840e6917fd8ec88a76334883d"
    }, 
    "static": {
        "pdb_path": null, 
        "pe_imports": [
            {
                "imports": [
                    {
                        "name": "VirtualAllocEx", 
                        "address": "0x4882b0"
                    }, 
                    {
                        "name": "ReadProcessMemory", 
                        "address": "0x4882b4"
                    }, 
                    {
                        "name": "GetThreadContext", 
                        "address": "0x4882b8"
                    }, 
                    {
                        "name": "VirtualAlloc", 
                        "address": "0x4882bc"
                    }, 
                    {
                        "name": "CreateProcessA", 
                        "address": "0x4882c0"
                    }, 
                    {
                        "name": "WriteProcessMemory", 
                        "address": "0x4882c4"
                    }, 
                    {
                        "name": "GetModuleHandleA", 
                        "address": "0x4882c8"
                    }, 
                    {
                        "name": "SetFileAttributesA", 
                        "address": "0x4882cc"
                    }, 
                    {
                        "name": "GetModuleFileNameA", 
                        "address": "0x4882d0"
                    }, 
                    {
                        "name": "GetTempPathA", 
                        "address": "0x4882d4"
                    }, 
                    {
                        "name": "SetThreadContext", 
                        "address": "0x4882d8"
                    }, 
                    {
                        "name": "ResumeThread", 
                        "address": "0x4882dc"
                    }, 
                    {
                        "name": "GetProcAddress", 
                        "address": "0x4882e0"
                    }, 
                    {
                        "name": "VirtualFree", 
                        "address": "0x4882e4"
                    }, 
                    {
                        "name": "InterlockedIncrement", 
                        "address": "0x4882e8"
                    }, 
                    {
                        "name": "InterlockedDecrement", 
                        "address": "0x4882ec"
                    }, 
                    {
                        "name": "Sleep", 
                        "address": "0x4882f0"
                    }, 
                    {
                        "name": "InterlockedExchange", 
                        "address": "0x4882f4"
                    }, 
                    {
                        "name": "InitializeCriticalSection", 
                        "address": "0x4882f8"
                    }, 
                    {
                        "name": "DeleteCriticalSection", 
                        "address": "0x4882fc"
                    }, 
                    {
                        "name": "EnterCriticalSection", 
                        "address": "0x488300"
                    }, 
                    {
                        "name": "LeaveCriticalSection", 
                        "address": "0x488304"
                    }, 
                    {
                        "name": "EncodePointer", 
                        "address": "0x488308"
                    }, 
                    {
                        "name": "DecodePointer", 
                        "address": "0x48830c"
                    }, 
                    {
                        "name": "RtlUnwind", 
                        "address": "0x488310"
                    }, 
                    {
                        "name": "RaiseException", 
                        "address": "0x488314"
                    }, 
                    {
                        "name": "TerminateProcess", 
                        "address": "0x488318"
                    }, 
                    {
                        "name": "GetCurrentProcess", 
                        "address": "0x48831c"
                    }, 
                    {
                        "name": "UnhandledExceptionFilter", 
                        "address": "0x488320"
                    }, 
                    {
                        "name": "SetUnhandledExceptionFilter", 
                        "address": "0x488324"
                    }, 
                    {
                        "name": "IsDebuggerPresent", 
                        "address": "0x488328"
                    }, 
                    {
                        "name": "GetModuleFileNameW", 
                        "address": "0x48832c"
                    }, 
                    {
                        "name": "HeapValidate", 
                        "address": "0x488330"
                    }, 
                    {
                        "name": "IsBadReadPtr", 
                        "address": "0x488334"
                    }, 
                    {
                        "name": "GetCommandLineA", 
                        "address": "0x488338"
                    }, 
                    {
                        "name": "HeapSetInformation", 
                        "address": "0x48833c"
                    }, 
                    {
                        "name": "GetStartupInfoW", 
                        "address": "0x488340"
                    }, 
                    {
                        "name": "WideCharToMultiByte", 
                        "address": "0x488344"
                    }, 
                    {
                        "name": "LCMapStringW", 
                        "address": "0x488348"
                    }, 
                    {
                        "name": "MultiByteToWideChar", 
                        "address": "0x48834c"
                    }, 
                    {
                        "name": "GetCPInfo", 
                        "address": "0x488350"
                    }, 
                    {
                        "name": "TlsAlloc", 
                        "address": "0x488354"
                    }, 
                    {
                        "name": "TlsGetValue", 
                        "address": "0x488358"
                    }, 
                    {
                        "name": "TlsSetValue", 
                        "address": "0x48835c"
                    }, 
                    {
                        "name": "GetCurrentThreadId", 
                        "address": "0x488360"
                    }, 
                    {
                        "name": "TlsFree", 
                        "address": "0x488364"
                    }, 
                    {
                        "name": "GetModuleHandleW", 
                        "address": "0x488368"
                    }, 
                    {
                        "name": "SetLastError", 
                        "address": "0x48836c"
                    }, 
                    {
                        "name": "GetLastError", 
                        "address": "0x488370"
                    }, 
                    {
                        "name": "GetCurrentThread", 
                        "address": "0x488374"
                    }, 
                    {
                        "name": "lstrlenA", 
                        "address": "0x488378"
                    }, 
                    {
                        "name": "LoadLibraryW", 
                        "address": "0x48837c"
                    }, 
                    {
                        "name": "GetACP", 
                        "address": "0x488380"
                    }, 
                    {
                        "name": "GetOEMCP", 
                        "address": "0x488384"
                    }, 
                    {
                        "name": "IsValidCodePage", 
                        "address": "0x488388"
                    }, 
                    {
                        "name": "InitializeCriticalSectionAndSpinCount", 
                        "address": "0x48838c"
                    }, 
                    {
                        "name": "FatalAppExitA", 
                        "address": "0x488390"
                    }, 
                    {
                        "name": "GetStdHandle", 
                        "address": "0x488394"
                    }, 
                    {
                        "name": "WriteFile", 
                        "address": "0x488398"
                    }, 
                    {
                        "name": "OutputDebugStringA", 
                        "address": "0x48839c"
                    }, 
                    {
                        "name": "WriteConsoleW", 
                        "address": "0x4883a0"
                    }, 
                    {
                        "name": "GetFileType", 
                        "address": "0x4883a4"
                    }, 
                    {
                        "name": "OutputDebugStringW", 
                        "address": "0x4883a8"
                    }, 
                    {
                        "name": "ExitProcess", 
                        "address": "0x4883ac"
                    }, 
                    {
                        "name": "SetConsoleCtrlHandler", 
                        "address": "0x4883b0"
                    }, 
                    {
                        "name": "IsProcessorFeaturePresent", 
                        "address": "0x4883b4"
                    }, 
                    {
                        "name": "SetHandleCount", 
                        "address": "0x4883b8"
                    }, 
                    {
                        "name": "GetConsoleCP", 
                        "address": "0x4883bc"
                    }, 
                    {
                        "name": "GetConsoleMode", 
                        "address": "0x4883c0"
                    }, 
                    {
                        "name": "ReadFile", 
                        "address": "0x4883c4"
                    }, 
                    {
                        "name": "SetFilePointer", 
                        "address": "0x4883c8"
                    }, 
                    {
                        "name": "FlushFileBuffers", 
                        "address": "0x4883cc"
                    }, 
                    {
                        "name": "CloseHandle", 
                        "address": "0x4883d0"
                    }, 
                    {
                        "name": "HeapAlloc", 
                        "address": "0x4883d4"
                    }, 
                    {
                        "name": "HeapReAlloc", 
                        "address": "0x4883d8"
                    }, 
                    {
                        "name": "HeapSize", 
                        "address": "0x4883dc"
                    }, 
                    {
                        "name": "HeapQueryInformation", 
                        "address": "0x4883e0"
                    }, 
                    {
                        "name": "HeapFree", 
                        "address": "0x4883e4"
                    }, 
                    {
                        "name": "HeapCreate", 
                        "address": "0x4883e8"
                    }, 
                    {
                        "name": "HeapDestroy", 
                        "address": "0x4883ec"
                    }, 
                    {
                        "name": "QueryPerformanceCounter", 
                        "address": "0x4883f0"
                    }, 
                    {
                        "name": "GetTickCount", 
                        "address": "0x4883f4"
                    }, 
                    {
                        "name": "GetCurrentProcessId", 
                        "address": "0x4883f8"
                    }, 
                    {
                        "name": "GetSystemTimeAsFileTime", 
                        "address": "0x4883fc"
                    }, 
                    {
                        "name": "FreeEnvironmentStringsW", 
                        "address": "0x488400"
                    }, 
                    {
                        "name": "GetEnvironmentStringsW", 
                        "address": "0x488404"
                    }, 
                    {
                        "name": "GetLocaleInfoW", 
                        "address": "0x488408"
                    }, 
                    {
                        "name": "GetStringTypeW", 
                        "address": "0x48840c"
                    }, 
                    {
                        "name": "GetLocaleInfoA", 
                        "address": "0x488410"
                    }, 
                    {
                        "name": "IsValidLocale", 
                        "address": "0x488414"
                    }, 
                    {
                        "name": "EnumSystemLocalesA", 
                        "address": "0x488418"
                    }, 
                    {
                        "name": "GetUserDefaultLCID", 
                        "address": "0x48841c"
                    }, 
                    {
                        "name": "GetProcessHeap", 
                        "address": "0x488420"
                    }, 
                    {
                        "name": "VirtualQuery", 
                        "address": "0x488424"
                    }, 
                    {
                        "name": "FreeLibrary", 
                        "address": "0x488428"
                    }, 
                    {
                        "name": "SetStdHandle", 
                        "address": "0x48842c"
                    }, 
                    {
                        "name": "CreateFileA", 
                        "address": "0x488430"
                    }, 
                    {
                        "name": "CreateFileW", 
                        "address": "0x488434"
                    }, 
                    {
                        "name": "SetEndOfFile", 
                        "address": "0x488438"
                    }
                ], 
                "dll": "KERNEL32.dll"
            }, 
            {
                "imports": [
                    {
                        "name": "RegSetValueExA", 
                        "address": "0x488278"
                    }, 
                    {
                        "name": "RegCloseKey", 
                        "address": "0x48827c"
                    }, 
                    {
                        "name": "RegOpenKeyA", 
                        "address": "0x488280"
                    }
                ], 
                "dll": "ADVAPI32.dll"
            }
        ], 
        "peid_signatures": null, 
        "keys": [], 
        "signature": [], 
        "pe_timestamp": "2015-08-23 17:38:11", 
        "pe_exports": [], 
        "imported_dll_count": 2, 
        "pe_imphash": "29a392a6c9f9e0bd26f443fd47fe3e15", 
        "pe_resources": [
            {
                "name": "RT_MANIFEST", 
                "language": "LANG_ENGLISH", 
                "filetype": "XML 1.0 document, UTF-8 Unicode (with BOM) text, with CRLF line terminators", 
                "sublanguage": "SUBLANG_ENGLISH_US", 
                "offset": "0x00089170", 
                "size": "0x00000196"
            }
        ], 
        "pe_versioninfo": [], 
        "pe_sections": [
            {
                "size_of_data": "0x0006dc00", 
                "virtual_address": "0x00001000", 
                "entropy": 5.4357139755281025, 
                "name": ".text", 
                "virtual_size": "0x0006db9e"
            }, 
            {
                "size_of_data": "0x00014c00", 
                "virtual_address": "0x0006f000", 
                "entropy": 3.566957300755657, 
                "name": ".rdata", 
                "virtual_size": "0x00014aec"
            }, 
            {
                "size_of_data": "0x00001c00", 
                "virtual_address": "0x00084000", 
                "entropy": 2.788441631825387, 
                "name": ".data", 
                "virtual_size": "0x00003f44"
            }, 
            {
                "size_of_data": "0x00000e00", 
                "virtual_address": "0x00088000", 
                "entropy": 4.721880691571322, 
                "name": ".idata", 
                "virtual_size": "0x00000dd9"
            }, 
            {
                "size_of_data": "0x00000600", 
                "virtual_address": "0x00089000", 
                "entropy": 2.2532907567883176, 
                "name": ".rsrc", 
                "virtual_size": "0x00000459"
            }, 
            {
                "size_of_data": "0x00004a00", 
                "virtual_address": "0x0008a000", 
                "entropy": 6.3176847332305694, 
                "name": ".reloc", 
                "virtual_size": "0x00004993"
            }
        ]
    }, 
    "dropped": [
        {
            "yara": [], 
            "sha1": "8aef2bded665001d0a4adecee0109849e4dcc209", 
            "name": "ebe30d1c6f4f5345_pdf-001.pdf", 
            "type": "PE32 executable (console) Intel 80386 (stripped to external PDB), for MS Windows", 
            "virustotal": {
                "scans": {
                    "Bkav": {
                        "detected": false, 
                        "version": "1.3.0.6979", 
                        "result": null, 
                        "update": "20150831"
                    }, 
                    "MicroWorld-eScan": {
                        "detected": false, 
                        "version": "12.0.250.0", 
                        "result": null, 
                        "update": "20150831"
                    }, 
                    "nProtect": {
                        "detected": false, 
                        "version": "2015-08-31.01", 
                        "result": null, 
                        "update": "20150831"
                    }, 
                    "CMC": {
                        "detected": false, 
                        "version": "1.1.0.977", 
                        "result": null, 
                        "update": "20150831"
                    }, 
                    "CAT-QuickHeal": {
                        "detected": false, 
                        "version": "14.00", 
                        "result": null, 
                        "update": "20150831"
                    }, 
                    "ALYac": {
                        "detected": false, 
                        "version": "1.0.1.4", 
                        "result": null, 
                        "update": "20150831"
                    }, 
                    "Malwarebytes": {
                        "detected": false, 
                        "version": "2.1.1.1115", 
                        "result": null, 
                        "update": "20150831"
                    }, 
                    "VIPRE": {
                        "detected": false, 
                        "version": "43352", 
                        "result": null, 
                        "update": "20150831"
                    }, 
                    "AegisLab": {
                        "detected": false, 
                        "version": "1.5", 
                        "result": null, 
                        "update": "20150831"
                    }, 
                    "TheHacker": {
                        "detected": false, 
                        "version": "6.8.0.5.645", 
                        "result": null, 
                        "update": "20150830"
                    }, 
                    "BitDefender": {
                        "detected": false, 
                        "version": "7.2", 
                        "result": null, 
                        "update": "20150831"
                    }, 
                    "K7GW": {
                        "detected": false, 
                        "version": "9.209.17062", 
                        "result": null, 
                        "update": "20150831"
                    }, 
                    "K7AntiVirus": {
                        "detected": false, 
                        "version": "9.209.17061", 
                        "result": null, 
                        "update": "20150831"
                    }, 
                    "Agnitum": {
                        "detected": false, 
                        "version": "5.5.1.3", 
                        "result": null, 
                        "update": "20150831"
                    }, 
                    "F-Prot": {
                        "detected": false, 
                        "version": "4.7.1.166", 
                        "result": null, 
                        "update": "20150829"
                    }, 
                    "Symantec": {
                        "detected": false, 
                        "version": "20141.2.0.56", 
                        "result": null, 
                        "update": "20150830"
                    }, 
                    "ESET-NOD32": {
                        "detected": true, 
                        "version": "12179", 
                        "result": "Win32/Agent.XLA", 
                        "update": "20150831"
                    }, 
                    "TrendMicro-HouseCall": {
                        "detected": false, 
                        "version": "9.800.0.1009", 
                        "result": null, 
                        "update": "20150831"
                    }, 
                    "Avast": {
                        "detected": false, 
                        "version": "8.0.1489.320", 
                        "result": null, 
                        "update": "20150831"
                    }, 
                    "ClamAV": {
                        "detected": false, 
                        "version": "0.98.5.0", 
                        "result": null, 
                        "update": "20150831"
                    }, 
                    "GData": {
                        "detected": false, 
                        "version": "25", 
                        "result": null, 
                        "update": "20150831"
                    }, 
                    "Kaspersky": {
                        "detected": false, 
                        "version": "15.0.1.10", 
                        "result": null, 
                        "update": "20150831"
                    }, 
                    "Alibaba": {
                        "detected": false, 
                        "version": "1.0", 
                        "result": null, 
                        "update": "20150831"
                    }, 
                    "NANO-Antivirus": {
                        "detected": true, 
                        "version": "0.30.24.3283", 
                        "result": "Trojan.Win32.Swisyn.rawxq", 
                        "update": "20150831"
                    }, 
                    "ViRobot": {
                        "detected": false, 
                        "version": "2014.3.20.0", 
                        "result": null, 
                        "update": "20150831"
                    }, 
                    "ByteHero": {
                        "detected": false, 
                        "version": "1.0.0.1", 
                        "result": null, 
                        "update": "20150831"
                    }, 
                    "Rising": {
                        "detected": false, 
                        "version": "25.0.0.17", 
                        "result": null, 
                        "update": "20150831"
                    }, 
                    "Ad-Aware": {
                        "detected": false, 
                        "version": "12.0.163.0", 
                        "result": null, 
                        "update": "20150831"
                    }, 
                    "Sophos": {
                        "detected": false, 
                        "version": "4.98.0", 
                        "result": null, 
                        "update": "20150831"
                    }, 
                    "Comodo": {
                        "detected": false, 
                        "version": "23127", 
                        "result": null, 
                        "update": "20150831"
                    }, 
                    "F-Secure": {
                        "detected": false, 
                        "version": "11.0.19100.45", 
                        "result": null, 
                        "update": "20150829"
                    }, 
                    "DrWeb": {
                        "detected": true, 
                        "version": "7.0.14.8060", 
                        "result": "Trojan.Click3.14583", 
                        "update": "20150831"
                    }, 
                    "Zillya": {
                        "detected": false, 
                        "version": "2.0.0.2382", 
                        "result": null, 
                        "update": "20150831"
                    }, 
                    "TrendMicro": {
                        "detected": false, 
                        "version": "9.740.0.1012", 
                        "result": null, 
                        "update": "20150831"
                    }, 
                    "McAfee-GW-Edition": {
                        "detected": true, 
                        "version": "v2015", 
                        "result": "Artemis", 
                        "update": "20150831"
                    }, 
                    "Emsisoft": {
                        "detected": false, 
                        "version": "3.5.0.642", 
                        "result": null, 
                        "update": "20150831"
                    }, 
                    "Cyren": {
                        "detected": false, 
                        "version": "5.4.16.7", 
                        "result": null, 
                        "update": "20150831"
                    }, 
                    "Jiangmin": {
                        "detected": true, 
                        "version": "16.0.100", 
                        "result": "Trojan/Generic.qxcc", 
                        "update": "20150830"
                    }, 
                    "Avira": {
                        "detected": false, 
                        "version": "8.3.2.2", 
                        "result": null, 
                        "update": "20150831"
                    }, 
                    "Antiy-AVL": {
                        "detected": false, 
                        "version": "1.0.0.1", 
                        "result": null, 
                        "update": "20150831"
                    }, 
                    "Kingsoft": {
                        "detected": true, 
                        "version": "2013.4.9.267", 
                        "result": "Win32.Troj.Generic.a.(kcloud)", 
                        "update": "20150831"
                    }, 
                    "Arcabit": {
                        "detected": false, 
                        "version": "1.0.0.425", 
                        "result": null, 
                        "update": "20150831"
                    }, 
                    "SUPERAntiSpyware": {
                        "detected": false, 
                        "version": "5.6.0.1032", 
                        "result": null, 
                        "update": "20150829"
                    }, 
                    "AhnLab-V3": {
                        "detected": false, 
                        "version": "2015.09.01.00", 
                        "result": null, 
                        "update": "20150831"
                    }, 
                    "Microsoft": {
                        "detected": false, 
                        "version": "1.1.12002.0", 
                        "result": null, 
                        "update": "20150831"
                    }, 
                    "TotalDefense": {
                        "detected": false, 
                        "version": "37.1.62.1", 
                        "result": null, 
                        "update": "20150831"
                    }, 
                    "McAfee": {
                        "detected": true, 
                        "version": "6.0.6.653", 
                        "result": "Artemis!400A094008E0", 
                        "update": "20150831"
                    }, 
                    "AVware": {
                        "detected": false, 
                        "version": "1.5.0.21", 
                        "result": null, 
                        "update": "20150831"
                    }, 
                    "VBA32": {
                        "detected": false, 
                        "version": "3.12.26.4", 
                        "result": null, 
                        "update": "20150831"
                    }, 
                    "Panda": {
                        "detected": false, 
                        "version": "4.6.4.2", 
                        "result": null, 
                        "update": "20150831"
                    }, 
                    "Zoner": {
                        "detected": false, 
                        "version": "1.0", 
                        "result": null, 
                        "update": "20150831"
                    }, 
                    "Tencent": {
                        "detected": false, 
                        "version": "1.0.0.1", 
                        "result": null, 
                        "update": "20150831"
                    }, 
                    "Ikarus": {
                        "detected": true, 
                        "version": "T3.1.9.5.0", 
                        "result": "Trojan.Win32.Swrort", 
                        "update": "20150831"
                    }, 
                    "Fortinet": {
                        "detected": false, 
                        "version": "5.1.220.0", 
                        "result": null, 
                        "update": "20150831"
                    }, 
                    "AVG": {
                        "detected": false, 
                        "version": "16.0.0.4409", 
                        "result": null, 
                        "update": "20150831"
                    }, 
                    "Baidu-International": {
                        "detected": false, 
                        "version": "3.5.1.41473", 
                        "result": null, 
                        "update": "20150831"
                    }, 
                    "Qihoo-360": {
                        "detected": false, 
                        "version": "1.0.0.1015", 
                        "result": null, 
                        "update": "20150831"
                    }
                }, 
                "scan_id": "ebe30d1c6f4f5345bb61cc88c84b12540be72faf262023a0dc1d98fd8ee33eab-1441034567", 
                "sha1": "8aef2bded665001d0a4adecee0109849e4dcc209", 
                "resource": "400a094008e0bcf8491ae75151eb22fe", 
                "response_code": 1, 
                "scan_date": "2015-08-31 15:22:47", 
                "permalink": "https://www.virustotal.com/file/ebe30d1c6f4f5345bb61cc88c84b12540be72faf262023a0dc1d98fd8ee33eab/analysis/1441034567/", 
                "summary": {
                    "positives": 8, 
                    "permalink": "https://www.virustotal.com/file/ebe30d1c6f4f5345bb61cc88c84b12540be72faf262023a0dc1d98fd8ee33eab/analysis/1441034567/", 
                    "scan_date": "2015-08-31 15:22:47"
                }, 
                "sha256": "ebe30d1c6f4f5345bb61cc88c84b12540be72faf262023a0dc1d98fd8ee33eab", 
                "total": 57, 
                "positives": 8, 
                "verbose_msg": "Scan finished, information embedded", 
                "md5": "400a094008e0bcf8491ae75151eb22fe"
            }, 
            "sha256": "ebe30d1c6f4f5345bb61cc88c84b12540be72faf262023a0dc1d98fd8ee33eab", 
            "urls": [], 
            "crc32": "5E9B8C4D", 
            "path": "/home/cuckoo/cuckoo/storage/analyses/129/files/ebe30d1c6f4f5345_pdf-001.pdf", 
            "ssdeep": "48:6XLW/+XJhgxMsfckTtXNBq1eagv9bUS2EvvuhlQHBqF:GAOJhgxMAckxjay9IS26vuhlQH4F", 
            "size": 4096, 
            "sha512": "57e765aacfc9bfa7e2147722b0f65c4dfe7b8326fdd8945f34e19363ee5aa873cf03f940e5a5af9860b41333d5217ceec9986c83bb2c00e927a396c9a1e31233", 
            "md5": "400a094008e0bcf8491ae75151eb22fe"
        }
    ], 
    "behavior": {
        "generic": [
            {
                "process_name": "test.exe", 
                "ppid": 644, 
                "pid": 848, 
                "first_seen": 1456289646.375, 
                "summary": {}
            }, 
            {
                "process_name": "pdf-001.pdf", 
                "ppid": 612, 
                "pid": 644, 
                "first_seen": 1456290020.375, 
                "summary": {
                    "dll_loaded": [
                        "uxtheme.dll", 
                        "srclient.dll", 
                        "C:\\WINDOWS\\system32\\uxtheme.dll"
                    ], 
                    "file_failed": [
                        "C:\\WINDOWS\\VMPipe32.dll"
                    ], 
                    "file_copied": [
                        [
                            "C:\\Documents and Settings\\Administrator\\Local Settings\\Temp\\pdf-001.pdf", 
                            "C:\\WINDOWS\\test.exe"
                        ]
                    ], 
                    "regkey_opened": [
                        "HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\ThemeManager", 
                        "HKEY_CURRENT_USER\\Control Panel\\Desktop", 
                        "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\WBEM\\CIMOM", 
                        "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", 
                        "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\MosTrace\\CurrentVersion\\DebugAsyncTrace", 
                        "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\ShellCompatibility\\Applications\\pdf-001.pdf"
                    ], 
                    "file_written": [
                        "\\\\?\\PIPE\\lsarpc"
                    ], 
                    "file_exists": [
                        "C:\\WINDOWS\\test.exe"
                    ], 
                    "mutex": [
                        "ASPLOG", 
                        "WBEMPROVIDERSTATICMUTEX"
                    ], 
                    "file_opened": [
                        "\\\\?\\PIPE\\lsarpc", 
                        "C:\\WINDOWS\\test.exe"
                    ], 
                    "command_line": [
                        "\"C:\\WINDOWS\\test.exe\" \\melt \"C:\\DOCUME~1\\ADMINI~1\\LOCALS~1\\Temp\\pdf-001.pdf\""
                    ], 
                    "file_read": [
                        "\\\\?\\PIPE\\lsarpc"
                    ], 
                    "regkey_read": [
                        "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\policies\\system\\EnableLUA", 
                        "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\WBEM\\CIMOM\\Logging", 
                        "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\WBEM\\CIMOM\\Log File Max Size", 
                        "HKEY_CURRENT_USER\\Control Panel\\Desktop\\LameButtonText", 
                        "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\WBEM\\CIMOM\\Logging Directory", 
                        "HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\ThemeManager\\Compositing"
                    ], 
                    "directory_enumerated": [
                        "C:\\WINDOWS\\*.*"
                    ]
                }
            }, 
            {
                "process_name": "lsass.exe", 
                "ppid": 528, 
                "pid": 680, 
                "first_seen": 1456290128.75, 
                "summary": {}
            }, 
            {
                "process_name": "8a8b33e909ec094bd7c69853b49b1e0cf1f7d3443129150f7d7070b98be9fbdc.exe", 
                "ppid": 600, 
                "pid": 612, 
                "first_seen": 1456290285.0, 
                "summary": {
                    "file_opened": [
                        "C:\\Documents and Settings\\Administrator\\Local Settings\\Temp\\8a8b33e909ec094bd7c69853b49b1e0cf1f7d3443129150f7d7070b98be9fbdc.exe", 
                        "C:\\Documents and Settings\\Administrator\\Local Settings\\Temp\\pdf-001.pdf"
                    ], 
                    "command_line": [
                        "C:\\Documents and Settings\\Administrator\\Local Settings\\Temp\\pdf-001.pdf"
                    ], 
                    "file_read": [
                        "C:\\Documents and Settings\\Administrator\\Local Settings\\Temp\\8a8b33e909ec094bd7c69853b49b1e0cf1f7d3443129150f7d7070b98be9fbdc.exe"
                    ], 
                    "file_written": [
                        "C:\\Documents and Settings\\Administrator\\Local Settings\\Temp\\pdf-001.pdf"
                    ], 
                    "regkey_opened": [
                        "HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run"
                    ]
                }
            }
        ], 
        "apistats": {
            "612": {
                "NtReadFile": 261, 
                "WriteProcessMemory": 10, 
                "NtSetContextThread": 1, 
                "NtTerminateProcess": 3, 
                "NtClose": 2, 
                "NtFreeVirtualMemory": 16, 
                "NtAllocateVirtualMemory": 36, 
                "ReadProcessMemory": 1, 
                "RegOpenKeyExA": 1, 
                "NtWriteFile": 1, 
                "LdrGetDllHandle": 4, 
                "__exception__": 1, 
                "NtQuerySystemInformation": 1, 
                "NtResumeThread": 1, 
                "SetFilePointer": 5, 
                "NtUnmapViewOfSection": 1, 
                "SetUnhandledExceptionFilter": 2, 
                "GetTempPathW": 1, 
                "NtCreateFile": 2, 
                "GetSystemTimeAsFileTime": 1, 
                "NtGetContextThread": 1, 
                "LdrGetProcedureAddress": 6, 
                "GetFileType": 2, 
                "SetFileAttributesW": 1, 
                "CreateProcessInternalW": 1
            }, 
            "644": {
                "LdrUnloadDll": 2, 
                "GetSystemWindowsDirectoryA": 6, 
                "RegCloseKey": 10, 
                "NtSetInformationFile": 202, 
                "RegQueryValueExA": 6, 
                "DeviceIoControl": 7, 
                "WSAStartup": 7, 
                "IsDebuggerPresent": 1, 
                "LookupPrivilegeValueW": 1, 
                "NtClose": 539, 
                "GetFileAttributesW": 1, 
                "RegQueryValueExW": 2, 
                "NtMapViewOfSection": 1, 
                "GetSystemMetrics": 4, 
                "SizeofResource": 1, 
                "RegOpenKeyExW": 2, 
                "ShellExecuteExW": 1, 
                "NtAllocateVirtualMemory": 3, 
                "RegOpenKeyExA": 104, 
                "NtWriteFile": 101, 
                "LdrGetDllHandle": 3, 
                "NtFreeVirtualMemory": 5, 
                "GetComputerNameW": 1, 
                "NtReadFile": 101, 
                "NtUnmapViewOfSection": 5, 
                "NtQueryDirectoryFile": 1, 
                "SetUnhandledExceptionFilter": 1, 
                "NtCreateFile": 106, 
                "GetSystemTimeAsFileTime": 7, 
                "FindFirstFileExW": 1, 
                "RegQueryInfoKeyA": 1, 
                "NtCreateMutant": 2, 
                "NtOpenKey": 2, 
                "LoadResource": 1, 
                "LdrGetProcedureAddress": 6, 
                "CopyFileA": 1, 
                "SetFileTime": 1, 
                "LdrLoadDll": 3, 
                "NtTerminateProcess": 3, 
                "FindResourceA": 1
            }, 
            "848": {
                "SetUnhandledExceptionFilter": 2, 
                "NtTerminateProcess": 3
            }
        }, 
        "processes": [
            {
                "process_path": "C:\\WINDOWS\\system32\\lsass.exe", 
                "calls": [], 
                "track": false, 
                "pid": 680, 
                "process_name": "lsass.exe", 
                "command_line": "C:\\WINDOWS\\system32\\lsass.exe", 
                "time": 0, 
                "tid": 480, 
                "first_seen": 1456290128.75, 
                "ppid": 528, 
                "type": "process"
            }, 
            {
                "process_path": "C:\\Documents and Settings\\Administrator\\Local Settings\\Temp\\8a8b33e909ec094bd7c69853b49b1e0cf1f7d3443129150f7d7070b98be9fbdc.exe", 
                "calls": [], 
                "track": true, 
                "pid": 612, 
                "process_name": "8a8b33e909ec094bd7c69853b49b1e0cf1f7d3443129150f7d7070b98be9fbdc.exe", 
                "command_line": "\"C:\\Documents and Settings\\Administrator\\Local Settings\\Temp\\8a8b33e909ec094bd7c69853b49b1e0cf1f7d3443129150f7d7070b98be9fbdc.exe\" ", 
                "time": 0, 
                "tid": 616, 
                "first_seen": 1456290285.0, 
                "ppid": 600, 
                "type": "process"
            }, 
            {
                "process_path": "C:\\Documents and Settings\\Administrator\\Local Settings\\Temp\\pdf-001.pdf", 
                "calls": [], 
                "track": true, 
                "pid": 644, 
                "process_name": "pdf-001.pdf", 
                "command_line": "\"C:\\DOCUME~1\\ADMINI~1\\LOCALS~1\\Temp\\pdf-001.pdf\"", 
                "time": 0, 
                "tid": 748, 
                "first_seen": 1456290020.375, 
                "ppid": 612, 
                "type": "process"
            }, 
            {
                "process_path": "C:\\WINDOWS\\test.exe", 
                "calls": [], 
                "track": true, 
                "pid": 848, 
                "process_name": "test.exe", 
                "command_line": "\"C:\\WINDOWS\\test.exe\" \\melt \"C:\\DOCUME~1\\ADMINI~1\\LOCALS~1\\Temp\\pdf-001.pdf\"", 
                "time": 0, 
                "tid": 852, 
                "first_seen": 1456289646.375, 
                "ppid": 644, 
                "type": "process"
            }
        ], 
        "processtree": [
            {
                "track": false, 
                "pid": 680, 
                "process_name": "lsass.exe", 
                "command_line": "C:\\WINDOWS\\system32\\lsass.exe", 
                "first_seen": 1456290128.75, 
                "ppid": 528, 
                "children": []
            }, 
            {
                "track": true, 
                "pid": 612, 
                "process_name": "8a8b33e909ec094bd7c69853b49b1e0cf1f7d3443129150f7d7070b98be9fbdc.exe", 
                "command_line": "\"C:\\Documents and Settings\\Administrator\\Local Settings\\Temp\\8a8b33e909ec094bd7c69853b49b1e0cf1f7d3443129150f7d7070b98be9fbdc.exe\" ", 
                "first_seen": 1456290285.0, 
                "ppid": 600, 
                "children": [
                    {
                        "track": true, 
                        "pid": 644, 
                        "process_name": "pdf-001.pdf", 
                        "command_line": "\"C:\\DOCUME~1\\ADMINI~1\\LOCALS~1\\Temp\\pdf-001.pdf\"", 
                        "first_seen": 1456290020.375, 
                        "ppid": 612, 
                        "children": [
                            {
                                "track": true, 
                                "pid": 848, 
                                "process_name": "test.exe", 
                                "command_line": "\"C:\\WINDOWS\\test.exe\" \\melt \"C:\\DOCUME~1\\ADMINI~1\\LOCALS~1\\Temp\\pdf-001.pdf\"", 
                                "first_seen": 1456289646.375, 
                                "ppid": 644, 
                                "children": []
                            }
                        ]
                    }
                ]
            }
        ], 
        "summary": {
            "dll_loaded": [
                "uxtheme.dll", 
                "srclient.dll", 
                "C:\\WINDOWS\\system32\\uxtheme.dll"
            ], 
            "file_opened": [
                "C:\\Documents and Settings\\Administrator\\Local Settings\\Temp\\8a8b33e909ec094bd7c69853b49b1e0cf1f7d3443129150f7d7070b98be9fbdc.exe", 
                "\\\\?\\PIPE\\lsarpc", 
                "C:\\WINDOWS\\test.exe", 
                "C:\\Documents and Settings\\Administrator\\Local Settings\\Temp\\pdf-001.pdf"
            ], 
            "file_copied": [
                [
                    "C:\\Documents and Settings\\Administrator\\Local Settings\\Temp\\pdf-001.pdf", 
                    "C:\\WINDOWS\\test.exe"
                ]
            ], 
            "regkey_opened": [
                "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\ShellCompatibility\\Applications\\pdf-001.pdf", 
                "HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run", 
                "HKEY_CURRENT_USER\\Control Panel\\Desktop", 
                "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\WBEM\\CIMOM", 
                "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", 
                "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\MosTrace\\CurrentVersion\\DebugAsyncTrace", 
                "HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\ThemeManager"
            ], 
            "command_line": [
                "\"C:\\WINDOWS\\test.exe\" \\melt \"C:\\DOCUME~1\\ADMINI~1\\LOCALS~1\\Temp\\pdf-001.pdf\"", 
                "C:\\Documents and Settings\\Administrator\\Local Settings\\Temp\\pdf-001.pdf"
            ], 
            "file_written": [
                "\\\\?\\PIPE\\lsarpc", 
                "C:\\Documents and Settings\\Administrator\\Local Settings\\Temp\\pdf-001.pdf"
            ], 
            "file_exists": [
                "C:\\WINDOWS\\test.exe"
            ], 
            "mutex": [
                "ASPLOG", 
                "WBEMPROVIDERSTATICMUTEX"
            ], 
            "file_failed": [
                "C:\\WINDOWS\\VMPipe32.dll"
            ], 
            "file_read": [
                "C:\\Documents and Settings\\Administrator\\Local Settings\\Temp\\8a8b33e909ec094bd7c69853b49b1e0cf1f7d3443129150f7d7070b98be9fbdc.exe", 
                "\\\\?\\PIPE\\lsarpc"
            ], 
            "regkey_read": [
                "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\policies\\system\\EnableLUA", 
                "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\WBEM\\CIMOM\\Logging", 
                "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\WBEM\\CIMOM\\Log File Max Size", 
                "HKEY_CURRENT_USER\\Control Panel\\Desktop\\LameButtonText", 
                "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\WBEM\\CIMOM\\Logging Directory", 
                "HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\ThemeManager\\Compositing"
            ], 
            "directory_enumerated": [
                "C:\\WINDOWS\\*.*"
            ]
        }
    }, 
    "debug": {
        "errors": [], 
        "log": [
            "2016-02-24 03:50:10,000 [analyzer] DEBUG: Starting analyzer from: C:\\tmpzj1gjp\n", 
            "2016-02-24 03:50:10,000 [analyzer] DEBUG: Pipe server name: \\\\.\\PIPE\\NioIcXGKWhAckhiXd\n", 
            "2016-02-24 03:50:10,000 [analyzer] DEBUG: Log pipe server name: \\\\.\\PIPE\\zCeurUhIPgdkEOiu\n", 
            "2016-02-24 03:50:10,000 [analyzer] DEBUG: No analysis package specified, trying to detect it automagically.\n", 
            "2016-02-24 03:50:10,000 [analyzer] INFO: Automatically selected analysis package \"exe\"\n", 
            "2016-02-24 03:50:10,608 [analyzer] DEBUG: Started auxiliary module Disguise\n", 
            "2016-02-24 03:50:10,780 [analyzer] DEBUG: Loaded monitor into process with pid 680\n", 
            "2016-02-24 03:50:10,780 [lib.api.process] INFO: Successfully injected process with pid None\n", 
            "2016-02-24 03:50:10,780 [analyzer] DEBUG: Started auxiliary module DumpTLSMasterSecrets\n", 
            "2016-02-24 03:50:10,780 [analyzer] DEBUG: Started auxiliary module Human\n", 
            "2016-02-24 03:50:10,780 [analyzer] DEBUG: Started auxiliary module InstallCertificate\n", 
            "2016-02-24 03:50:10,780 [analyzer] DEBUG: Started auxiliary module Screenshots\n", 
            "2016-02-24 03:50:10,812 [lib.api.process] INFO: Successfully executed process from path u'C:\\\\DOCUME~1\\\\ADMINI~1\\\\LOCALS~1\\\\Temp\\\\8a8b33e909ec094bd7c69853b49b1e0cf1f7d3443129150f7d7070b98be9fbdc.exe' with arguments '' and pid 612\n", 
            "2016-02-24 03:50:10,937 [analyzer] DEBUG: Loaded monitor into process with pid 612\n", 
            "2016-02-24 03:50:11,483 [analyzer] INFO: Added new file to list with path: C:\\Documents and Settings\\Administrator\\Local Settings\\Temp\\pdf-001.pdf\n", 
            "2016-02-24 03:50:11,515 [lib.api.process] INFO: Successfully injected process with pid 644\n", 
            "2016-02-24 03:50:11,515 [analyzer] INFO: Injected into process with pid 644 and name pdf-001.pdf\n", 
            "2016-02-24 03:50:11,530 [analyzer] DEBUG: Received request to inject pid=644, but we are already injected there.\n", 
            "2016-02-24 03:50:11,687 [analyzer] DEBUG: Loaded monitor into process with pid 644\n", 
            "2016-02-24 03:50:11,687 [analyzer] INFO: Added new file to list with path: \\Device\\NamedPipe\\lsass\n", 
            "2016-02-24 03:50:11,812 [analyzer] INFO: Process with pid 612 has terminated\n", 
            "2016-02-24 03:50:12,155 [lib.api.process] INFO: Successfully injected process with pid 848\n", 
            "2016-02-24 03:50:12,155 [analyzer] INFO: Injected into process with pid 848 and name test.exe\n", 
            "2016-02-24 03:50:12,296 [analyzer] DEBUG: Loaded monitor into process with pid 848\n", 
            "2016-02-24 03:50:12,812 [analyzer] INFO: Process with pid 644 has terminated\n", 
            "2016-02-24 03:50:13,812 [analyzer] INFO: Process with pid 848 has terminated\n", 
            "2016-02-24 03:50:13,812 [analyzer] INFO: Process list is empty, terminating analysis.\n", 
            "2016-02-24 03:50:14,812 [analyzer] WARNING: File at path \"u'\\\\device\\\\namedpipe\\\\lsass'\" does not exist, skip.\n", 
            "2016-02-24 03:50:14,812 [analyzer] INFO: Analysis completed.\n"
        ]
    }, 
    "strings": [
        "!This program cannot be run in DOS mode.", 
        "Richfx", 
        "`.rdata", 
        "@.data", 
        ".idata", 
        "@.reloc", 
        "char_array_3", 
        "char_array_4", 
        "contents", 
        "dwImageBase", 
        "Processo", 
        "GravarReg", 
        "Arquivo", 
        "DecodificarSvchost", 
        "DecodificarExe", 
        "SEPARARSVCHOST", 
        "SEPARAREXE", 
        "campos2", 
        "campos", 
        "Conteudo", 
        "ArquivoAtual", 
        "TempArquivo", 
        "_Fileposition", 
        "_Fileposition", 
        "_Alproxy", 
        "_Alproxy", 
        "_Alproxy", 
        "_Alproxy", 
        "_Psave", 
        "_Psave", 
        "j/hH G", 
        "j/hH G", 
        "j)h \"G", 
        "j)h \"G", 
        "j-h \"G", 
        "j-h \"G", 
        "jCh \"G", 
        "jCh \"G", 
        "jGh \"G", 
        "jGh \"G", 
        "j*hX$G", 
        "j*hX$G", 
        "j+hX$G", 
        "j+hX$G", 
        "j.hx&G", 
        "j.hx&G", 
        "jYhx&G", 
        "jYhx&G", 
        "u!hT(G", 
        "t h0'G", 
        "u!hT(G", 
        "t!hx)G", 
        "t!hx(G", 
        "u!hT(G", 
        "u%hH/G", 
        "t!h`,G", 
        "t!h$,G", 
        "u!hT(G", 
        " Qh@0G", 
        "u!hP2G", 
        " Rht5G", 
        " PhD5G", 
        "t1hL6G", 
        "H0Qhd6G", 
        "u!hh7G", 
        "u!hh7G", 
        "u!hH<G", 
        "u!hH<G", 
        "}'hXJH", 
        "u!h`?G", 
        "HRhXAG", 
        "@RhxGG", 
        "u!hpHG", 
        "j^hlQG", 
        "jbhlQG", 
        "jdhlQG", 
        "jfhlQG", 
        "jhhlQG", 
        "$RhPWG", 
        "~ Wh@WG", 
        "PRSVWh", 
        "u!hx`G", 
        "jqhHcG", 
        "jqhHcG", 
        "u\"hHbG", 
        "jvhHcG", 
        "jvhHcG", 
        "t\u001fh`pG", 
        "u!h,qG", 
        "u!hlsG", 
        "y!h uG", 
        "j)h@xG", 
        "j)h@xG", 
        "jihPyG", 
        "jihPyG", 
        "jMh@zG", 
        "jMh@zG", 
        "jNh@zG", 
        "jNh@zG", 
        "jYh@zG", 
        "j,hx{G", 
        "j,hx{G", 
        "j-hx{G", 
        "j-hx{G", 
        "jEhx{G", 
        "jWh(}G", 
        "URPQQhP", 
        "PPPPPPPP", 
        "PPPPPPPP", 
        ";t$,v-", 
        "UQPXY]Y[", 
        "j@hliH", 
        "j@hliH", 
        "u!hlsG", 
        "u!hlsG", 
        "u!hlsG", 
        "u!hlsG", 
        "u!h8wG", 
        "u!h8wG", 
        "u!hlsG", 
        "u!hlsG", 
        "u!hh!G", 
        "u!hlsG", 
        "u!hlsG", 
        "u!hlsG", 
        "u!hlsG", 
        "u\\j[h(", 
        "y!h uG", 
        "NtUnmapViewOfSection", 
        "ntdll.dll", 
        "RtlZeroMemory", 
        "pdf-001", 
        "Software\\Microsoft\\Windows\\CurrentVersion\\Run", 
        "QDk5OUA=", 
        "pdf-001.pdf", 
        "Standard C++ Libraries Out of Range", 
        "ios_base::eofbit set", 
        "ios_base::failbit set", 
        "ios_base::badbit set", 
        "string too long", 
        "invalid string position", 
        "c:\\program files\\microsoft visual studio 10.0\\vc\\include\\xiosbase", 
        "c:\\program files\\microsoft visual studio 10.0\\vc\\include\\streambuf", 
        "vector<T> too long", 
        "bad cast", 
        "c:\\program files\\microsoft visual studio 10.0\\vc\\include\\xlocale", 
        "bad locale name", 
        "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\xmutex.cpp", 
        "generic", 
        "iostream", 
        "iostream stream error", 
        "system", 
        "bad allocation", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\locale0.cpp", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\xutility", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\_tolower.c", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\dbgrpt.c", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\_file.c", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\setvbuf.c", 
        "Unknown exception", 
        "Client", 
        "Ignore", 
        "Normal", 
        "Error: memory allocation: bad memory block type.", 
        "Invalid allocation size: %Iu bytes.", 
        "Client hook allocation failure.", 
        "Client hook allocation failure at file %hs line %d.", 
        "Error: possible heap corruption at or near 0x%p", 
        "The Block at 0x%p was allocated by aligned routines, use _aligned_realloc()", 
        "Error: memory allocation: bad memory block type.", 
        "Memory allocated at %hs(%d).", 
        "Invalid allocation size: %Iu bytes.", 
        "Memory allocated at %hs(%d).", 
        "Client hook re-allocation failure.", 
        "Client hook re-allocation failure at file %hs line %d.", 
        "HEAP CORRUPTION DETECTED: after %hs block (#%d) at 0x%p.", 
        "CRT detected that the application wrote to memory after end of heap buffer.", 
        "HEAP CORRUPTION DETECTED: after %hs block (#%d) at 0x%p.", 
        "CRT detected that the application wrote to memory after end of heap buffer.", 
        "Memory allocated at %hs(%d).", 
        "HEAP CORRUPTION DETECTED: before %hs block (#%d) at 0x%p.", 
        "CRT detected that the application wrote to memory before start of heap buffer.", 
        "HEAP CORRUPTION DETECTED: before %hs block (#%d) at 0x%p.", 
        "CRT detected that the application wrote to memory before start of heap buffer.", 
        "Memory allocated at %hs(%d).", 
        "Client hook free failure.", 
        "The Block at 0x%p was allocated by aligned routines, use _aligned_free()", 
        "%hs located at 0x%p is %Iu bytes long.", 
        "%hs located at 0x%p is %Iu bytes long.", 
        "Memory allocated at %hs(%d).", 
        "HEAP CORRUPTION DETECTED: on top of Free block at 0x%p.", 
        "CRT detected that the application wrote to a heap buffer that was freed.", 
        "HEAP CORRUPTION DETECTED: on top of Free block at 0x%p.", 
        "CRT detected that the application wrote to a heap buffer that was freed.", 
        "Memory allocated at %hs(%d).", 
        "DAMAGED", 
        "_heapchk fails with unknown return value!", 
        "_heapchk fails with _HEAPBADPTR.", 
        "_heapchk fails with _HEAPBADEND.", 
        "_heapchk fails with _HEAPBADNODE.", 
        "_heapchk fails with _HEAPBADBEGIN.", 
        "Bad memory block found at 0x%p.", 
        "Bad memory block found at 0x%p.", 
        "Memory allocated at %hs(%d).", 
        "Object dump complete.", 
        "crt block at 0x%p, subtype %x, %Iu bytes long.", 
        "normal block at 0x%p, %Iu bytes long.", 
        "client block at 0x%p, subtype %x, %Iu bytes long.", 
        "{%ld} ", 
        "%hs(%d) : ", 
        "#File Error#(%d) : ", 
        "Dumping objects ->", 
        " Data: <%s> %s", 
        "Detected memory leaks!", 
        "Total allocations: %Id bytes.", 
        "Largest number used: %Id bytes.", 
        "%Id bytes in %Id %hs Blocks.", 
        "Damage before 0x%p which was allocated by aligned routine", 
        "The block at 0x%p was not allocated by _aligned routines, use realloc()", 
        "The block at 0x%p was not allocated by _aligned routines, use free()", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\onexit.c", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\strerror.c", 
        "Visual C++ CRT: Not enough memory to complete call to strerror.", 
        "bad exception", 
        "LC_TIME", 
        "LC_NUMERIC", 
        "LC_MONETARY", 
        "LC_CTYPE", 
        "LC_COLLATE", 
        "LC_ALL", 
        "\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\setlocal.c", 
        "\u001f !\"#$%&'()*+,-./0123456789:;<=>?@abcdefghijklmnopqrstuvwxyz[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~", 
        "\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`ABCDEFGHIJKLMNOPQRSTUVWXYZ{|}~", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\initctyp.c", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\tidtable.c", 
        "FlsFree", 
        "FlsSetValue", 
        "FlsGetValue", 
        "FlsAlloc", 
        "Unknown Runtime Check Error", 
        "Stack memory around _alloca was corrupted", 
        "A local variable was used before it was initialized", 
        "Stack memory was corrupted", 
        "A cast to a smaller data type has caused a loss of data.  If this was intentional, you should mask the source of the cast with the appropriate bitmask.  For example:  ", 
        "char c = (i & 0xFF);", 
        "Changing the code in this way will not affect the quality of the resulting optimized code.", 
        "The value of ESP was not properly saved across a function call.  This is usually a result of calling a function declared with one calling convention with a function pointer declared with a different calling convention.", 
        "Stack around the variable '", 
        "' was corrupted.", 
        "The variable '", 
        "' is being used without being initialized.", 
        "Run-Time Check Failure #%d - %s", 
        "Unknown Module Name", 
        "Unknown Filename", 
        "Stack corrupted near unknown variable", 
        "Stack area around _alloca memory reserved by this function is corrupted", 
        "%s%s%s%s", 
        "%s%s%p%s%ld%s%d%s", 
        "Stack area around _alloca memory reserved by this function is corrupted", 
        "Address: 0x", 
        "Size: ", 
        "Allocation number within this function: ", 
        "Data: <", 
        "wsprintfA", 
        "A variable is being used without being initialized.", 
        "Stack around _alloca corrupted", 
        "Local variable used before initialization", 
        "Stack memory corruption", 
        "Cast to smaller type causing loss of data", 
        "Stack pointer corruption", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\prebuild\\misc\\i386\\chkesp.c", 
        "The value of ESP was not properly saved across a function call.  This is usually a result of calling a function declared with one calling convention with a function pointer declared with a different calling convention. ", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\mbctype.c", 
        "HH:mm:ss", 
        "dddd, MMMM dd, yyyy", 
        "MM/dd/yy", 
        "December", 
        "November", 
        "October", 
        "September", 
        "August", 
        "February", 
        "January", 
        "Saturday", 
        "Friday", 
        "Thursday", 
        "Wednesday", 
        "Tuesday", 
        "Monday", 
        "Sunday", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\mlock.c", 
        "%s(%d) : %s", 
        "Assertion failed!", 
        "Assertion failed: ", 
        "_CrtDbgReport: String too long or IO Error", 
        ", Line ", 
        "<file unknown>", 
        "Second Chance Assertion Failed: File ", 
        "_CrtDbgReport: String too long or Invalid characters in String", 
        "CorExitProcess", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\winsig.c", 
        "GetProcessWindowStation", 
        "GetUserObjectInformationW", 
        "GetLastActivePopup", 
        "GetActiveWindow", 
        "MessageBoxW", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\ioinit.c", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\_getbuf.c", 
        "Assertion Failed", 
        "Warning", 
        "Microsoft Visual C++ Debug Library", 
        "Debug %s!", 
        "Program: %s%s%s%s%s%s%s%s%s%s%s%s", 
        "(Press Retry to debug the application)", 
        "Module: ", 
        "File: ", 
        "Line: ", 
        "Expression: ", 
        "For information on how your program can cause an assertion", 
        "failure, see the Visual C++ documentation on asserts.", 
        "<program name unknown>", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\stdenvp.c", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\stdargv.c", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\a_env.c", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\inithelp.c", 
        "Illegal byte sequence", 
        "Directory not empty", 
        "Function not implemented", 
        "No locks available", 
        "Filename too long", 
        "Resource deadlock avoided", 
        "Result too large", 
        "Domain error", 
        "Broken pipe", 
        "Too many links", 
        "Read-only file system", 
        "Invalid seek", 
        "No space left on device", 
        "File too large", 
        "Inappropriate I/O control operation", 
        "Too many open files", 
        "Too many open files in system", 
        "Invalid argument", 
        "Is a directory", 
        "Not a directory", 
        "No such device", 
        "Improper link", 
        "File exists", 
        "Resource device", 
        "Unknown error", 
        "Bad address", 
        "Permission denied", 
        "Not enough space", 
        "Resource temporarily unavailable", 
        "No child processes", 
        "Bad file descriptor", 
        "Exec format error", 
        "Arg list too long", 
        "No such device or address", 
        "Input/output error", 
        "Interrupted function call", 
        "No such process", 
        "No such file or directory", 
        "Operation not permitted", 
        "No error", 
        "UTF-16LE", 
        "UNICODE", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\stream.c", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\inittime.c", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\initnum.c", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\initmon.c", 
        "united-states", 
        "united-kingdom", 
        "trinidad & tobago", 
        "south-korea", 
        "south-africa", 
        "south korea", 
        "south africa", 
        "slovak", 
        "puerto-rico", 
        "pr-china", 
        "pr china", 
        "new-zealand", 
        "hong-kong", 
        "holland", 
        "great britain", 
        "england", 
        "britain", 
        "america", 
        "swedish-finland", 
        "spanish-venezuela", 
        "spanish-uruguay", 
        "spanish-puerto rico", 
        "spanish-peru", 
        "spanish-paraguay", 
        "spanish-panama", 
        "spanish-nicaragua", 
        "spanish-modern", 
        "spanish-mexican", 
        "spanish-honduras", 
        "spanish-guatemala", 
        "spanish-el salvador", 
        "spanish-ecuador", 
        "spanish-dominican republic", 
        "spanish-costa rica", 
        "spanish-colombia", 
        "spanish-chile", 
        "spanish-bolivia", 
        "spanish-argentina", 
        "portuguese-brazilian", 
        "norwegian-nynorsk", 
        "norwegian-bokmal", 
        "norwegian", 
        "italian-swiss", 
        "irish-english", 
        "german-swiss", 
        "german-luxembourg", 
        "german-lichtenstein", 
        "german-austrian", 
        "french-swiss", 
        "french-luxembourg", 
        "french-canadian", 
        "french-belgian", 
        "english-usa", 
        "english-us", 
        "english-uk", 
        "english-trinidad y tobago", 
        "english-south africa", 
        "english-nz", 
        "english-jamaica", 
        "english-ire", 
        "english-caribbean", 
        "english-can", 
        "english-belize", 
        "english-aus", 
        "english-american", 
        "dutch-belgian", 
        "chinese-traditional", 
        "chinese-singapore", 
        "chinese-simplified", 
        "chinese-hongkong", 
        "chinese", 
        "canadian", 
        "belgian", 
        "australian", 
        "american-english", 
        "american english", 
        "american", 
        "Norwegian-Nynorsk", 
        "PDBOpenValidate5", 
        "RegCloseKey", 
        "RegQueryValueExW", 
        "RegOpenKeyExW", 
        " Complete Object Locator'", 
        " Class Hierarchy Descriptor'", 
        " Base Class Array'", 
        " Base Class Descriptor at (", 
        " Type Descriptor'", 
        "`local static thread guard'", 
        "`managed vector copy constructor iterator'", 
        "`vector vbase copy constructor iterator'", 
        "`vector copy constructor iterator'", 
        "`dynamic atexit destructor for '", 
        "`dynamic initializer for '", 
        "`eh vector vbase copy constructor iterator'", 
        "`eh vector copy constructor iterator'", 
        "`managed vector destructor iterator'", 
        "`managed vector constructor iterator'", 
        "`placement delete[] closure'", 
        "`placement delete closure'", 
        "`omni callsig'", 
        " delete[]", 
        " new[]", 
        "`local vftable constructor closure'", 
        "`local vftable'", 
        "`udt returning'", 
        "`copy constructor closure'", 
        "`eh vector vbase constructor iterator'", 
        "`eh vector destructor iterator'", 
        "`eh vector constructor iterator'", 
        "`virtual displacement map'", 
        "`vector vbase constructor iterator'", 
        "`vector destructor iterator'", 
        "`vector constructor iterator'", 
        "`scalar deleting destructor'", 
        "`default constructor closure'", 
        "`vector deleting destructor'", 
        "`vbase destructor'", 
        "`string'", 
        "`local static guard'", 
        "`typeof'", 
        "`vcall'", 
        "`vbtable'", 
        "`vftable'", 
        "operator", 
        " delete", 
        "__unaligned", 
        "__restrict", 
        "__ptr64", 
        "__eabi", 
        "__clrcall", 
        "__fastcall", 
        "__thiscall", 
        "__stdcall", 
        "__pascal", 
        "__cdecl", 
        "__based(", 
        "generic-type-", 
        "template-parameter-", 
        "`anonymous namespace'", 
        "`non-type-template-parameter", 
        "`template-parameter", 
        "extern \"C\" ", 
        "[thunk]:", 
        "public: ", 
        "protected: ", 
        "private: ", 
        "virtual ", 
        "static ", 
        "`template static data member destructor helper'", 
        "`template static data member constructor helper'", 
        "`local static destructor helper'", 
        "`adjustor{", 
        "`vtordisp{", 
        "`vtordispex{", 
        "std::nullptr_t", 
        "volatile", 
        ",<ellipsis>", 
        "<ellipsis>", 
        " throw(", 
        " volatile", 
        "signed ", 
        "unsigned ", 
        "UNKNOWN", 
        "__w64 ", 
        "wchar_t", 
        "<unknown>", 
        "__int128", 
        "__int64", 
        "__int32", 
        "__int16", 
        "__int8", 
        "double", 
        "cointerface ", 
        "coclass ", 
        "class ", 
        "struct ", 
        "union ", 
        "`unknown ecsu'", 
        "short ", 
        "const ", 
        "volatile ", 
        "cli::pin_ptr<", 
        "cli::array<", 
        "{flat}", 
        "SystemFunction036", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\output.c", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\osfinfo.c", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\read.c", 
        "GetUserObjectInformationA", 
        "MessageBoxA", 
        "(null)", 
        "`h````", 
        "xpxxxx", 
        "`h`hhh", 
        "xppwpp", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\_sftbuf.c", 
        ".?AV?$basic_ios@DU?$char_traits@D@std@@@std@@", 
        ".?AVios_base@std@@", 
        ".?AV?$_Iosb@H@std@@", 
        ".?AV?$basic_ifstream@DU?$char_traits@D@std@@@std@@", 
        ".?AV?$basic_istream@DU?$char_traits@D@std@@@std@@", 
        ".?AV?$basic_filebuf@DU?$char_traits@D@std@@@std@@", 
        ".?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@", 
        ".?AV?$basic_ofstream@DU?$char_traits@D@std@@@std@@", 
        ".?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@", 
        ".?AVfailure@ios_base@std@@", 
        ".?AVsystem_error@std@@", 
        ".?AVruntime_error@std@@", 
        ".?AVexception@std@@", 
        ".?AVbad_cast@std@@", 
        ".?AV?$ctype@D@std@@", 
        ".?AUctype_base@std@@", 
        ".?AVfacet@locale@std@@", 
        ".?AVbad_alloc@std@@", 
        ".?AV?$codecvt@DDH@std@@", 
        ".?AVcodecvt_base@std@@", 
        ".?AV_Generic_error_category@std@@", 
        ".?AVerror_category@std@@", 
        ".?AV_Iostream_error_category@std@@", 
        ".?AV_System_error_category@std@@", 
        ".?AVinvalid_argument@std@@", 
        ".?AVlogic_error@std@@", 
        ".?AVlength_error@std@@", 
        ".?AVout_of_range@std@@", 
        ".?AVoverflow_error@std@@", 
        ".?AV_Locimp@locale@std@@", 
        "Copyright (c) 1992-2004 by P.J. Plauger, licensed by Dinkumware, Ltd. ALL RIGHTS RESERVED.", 
        ".?AVtype_info@@", 
        ".?AVbad_typeid@std@@", 
        ".?AV__non_rtti_object@std@@", 
        ".?AVbad_exception@std@@", 
        "                          ", 
        "abcdefghijklmnopqrstuvwxyz", 
        "ABCDEFGHIJKLMNOPQRSTUVWXYZ", 
        "                          ", 
        "abcdefghijklmnopqrstuvwxyz", 
        "ABCDEFGHIJKLMNOPQRSTUVWXYZ", 
        "VirtualFree", 
        "ResumeThread", 
        "SetThreadContext", 
        "WriteProcessMemory", 
        "VirtualAllocEx", 
        "ReadProcessMemory", 
        "GetThreadContext", 
        "VirtualAlloc", 
        "CreateProcessA", 
        "GetProcAddress", 
        "GetModuleHandleA", 
        "SetFileAttributesA", 
        "GetModuleFileNameA", 
        "GetTempPathA", 
        "KERNEL32.dll", 
        "RegCloseKey", 
        "RegSetValueExA", 
        "RegOpenKeyA", 
        "ADVAPI32.dll", 
        "InterlockedIncrement", 
        "InterlockedDecrement", 
        "InterlockedExchange", 
        "InitializeCriticalSection", 
        "DeleteCriticalSection", 
        "EnterCriticalSection", 
        "LeaveCriticalSection", 
        "EncodePointer", 
        "DecodePointer", 
        "RtlUnwind", 
        "RaiseException", 
        "TerminateProcess", 
        "GetCurrentProcess", 
        "UnhandledExceptionFilter", 
        "SetUnhandledExceptionFilter", 
        "IsDebuggerPresent", 
        "GetModuleFileNameW", 
        "HeapValidate", 
        "IsBadReadPtr", 
        "GetCommandLineA", 
        "HeapSetInformation", 
        "GetStartupInfoW", 
        "WideCharToMultiByte", 
        "LCMapStringW", 
        "MultiByteToWideChar", 
        "GetCPInfo", 
        "TlsAlloc", 
        "TlsGetValue", 
        "TlsSetValue", 
        "GetCurrentThreadId", 
        "TlsFree", 
        "GetModuleHandleW", 
        "SetLastError", 
        "GetLastError", 
        "GetCurrentThread", 
        "lstrlenA", 
        "LoadLibraryW", 
        "GetACP", 
        "GetOEMCP", 
        "IsValidCodePage", 
        "InitializeCriticalSectionAndSpinCount", 
        "FatalAppExitA", 
        "GetStdHandle", 
        "WriteFile", 
        "OutputDebugStringA", 
        "WriteConsoleW", 
        "GetFileType", 
        "OutputDebugStringW", 
        "ExitProcess", 
        "SetConsoleCtrlHandler", 
        "IsProcessorFeaturePresent", 
        "SetHandleCount", 
        "GetConsoleCP", 
        "GetConsoleMode", 
        "ReadFile", 
        "SetFilePointer", 
        "FlushFileBuffers", 
        "CloseHandle", 
        "HeapAlloc", 
        "HeapReAlloc", 
        "HeapSize", 
        "HeapQueryInformation", 
        "HeapFree", 
        "HeapCreate", 
        "HeapDestroy", 
        "QueryPerformanceCounter", 
        "GetTickCount", 
        "GetCurrentProcessId", 
        "GetSystemTimeAsFileTime", 
        "FreeEnvironmentStringsW", 
        "GetEnvironmentStringsW", 
        "GetLocaleInfoW", 
        "GetStringTypeW", 
        "GetLocaleInfoA", 
        "IsValidLocale", 
        "EnumSystemLocalesA", 
        "GetUserDefaultLCID", 
        "GetProcessHeap", 
        "VirtualQuery", 
        "FreeLibrary", 
        "SetStdHandle", 
        "CreateFileA", 
        "CreateFileW", 
        "SetEndOfFile", 
        "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>", 
        "<assembly xmlns=\"urn:schemas-microsoft-com:asm.v1\" manifestVersion=\"1.0\">", 
        "  <trustInfo xmlns=\"urn:schemas-microsoft-com:asm.v3\">", 
        "    <security>", 
        "      <requestedPrivileges>", 
        "        <requestedExecutionLevel level=\"asInvoker\" uiAccess=\"false\"></requestedExecutionLevel>", 
        "      </requestedPrivileges>", 
        "    </security>", 
        "  </trustInfo>", 
        "</assembly>", 
        "939D9h9t9", 
        ";M;R;l;k<", 
        "9d:i:y<", 
        "4 5,5D8K8", 
        "?T?`?l?x?", 
        "=6>\\>h>", 
        "3/3R3F9o9", 
        ";$<0<v<", 
        "=@=L=&>O>w>", 
        "0o3h4j5", 
        "< =r=Q?", 
        "7&9+989E9N9g9l9q9", 
        "7=7_7g7", 
        "8H8T8`8", 
        "9\u001f989\\9h9", 
        "8\u001f979m<M=", 
        ">.?>?Z?", 
        "x0\u001f181D1", 
        "1G3`3l3f4", 
        "7?8X8d8", 
        "><>B>j>", 
        "\u001f0?0_0v0", 
        "9J9z9J:z:", 
        "0(070a0", 
        "3 3*3F3", 
        "4v5X6g6", 
        ";@;[;{;", 
        "<%<,<5<><H<", 
        "070<0A0", 
        "7^7k7x7", 
        "8/8k8t8", 
        "94:l:u:", 
        "<\u001f<x<}<", 
        "=6=P=\\=p=|=", 
        ">2>>>N>Z>", 
        ">&?+?0?5?\\?", 
        "1?1]1d1h1l1p1t1x1|1", 
        "1B2M2h2o2t2x2|2", 
        "3f3l3p3t3x3", 
        "4+414:4H4R4`4f4", 
        "5=5N5h5q5{5", 
        "7+70757", 
        "8A8J8t8y8~8", 
        "<$=)=.=", 
        "=,>5>_>d>i>", 
        "H0M0_0", 
        "2,21262x3", 
        "454:4?4c4l4", 
        "4,555_5d5i5", 
        "687=7O7|7", 
        "7\"8.8a8m8", 
        ":.:3:8:_:h:", 
        ";5;>;h;m;r;", 
        ">,>5>_>d>i>", 
        ">\u001f?$?)?l?u?", 
        "(0-020", 
        "1X3]3o3", 
        "4/4Y4m4", 
        "4*5\\5t5{5", 
        "6 6j6p6t6x6|6", 
        "1 1$1(1,1014181<1@1D1H1L1P1T1X1\\1`1d1h1l1p1t1x1|1", 
        "8\u001f8L8U8", 
        "829;9e9j9o90:", 
        ":(<-<?<s<{<", 
        "=)=F=K=y=", 
        "?P?Y?r?", 
        "0X1]1o1O2X2a2q2}2", 
        "3&3+3e3", 
        "6#6(6.666<6a6}6", 
        "6 7*767R7p7z7", 
        "9!9N9S9X9", 
        ";F;a;m;r;", 
        "<>=D=|=", 
        "=,>8>Q>Z>_>", 
        "0'000@0L0b0n0w0", 
        "687<7@7D7X7]7o7", 
        "8$8;8Q8W8d8", 
        "9#9(989U9", 
        ":(:-:?:", 
        "<5<A<n<s<x<", 
        "=3>?>l>q>v>", 
        "?>?C?H?", 
        "1%2A2S2k2", 
        "4)5L5\\5a5", 
        "5-6I6m6", 
        "878<8A8", 
        "8u9Y:v:", 
        ";-;2;7;u;", 
        ">.?:?g?l?q?", 
        "/090A0F0P0]0j0", 
        "21262|2", 
        "32383I3", 
        "6D6Z6_6d6", 
        "757:7?7d7m7", 
        "8\u001f8S8\\8", 
        "9!9K9P9U9", 
        ":#;,;V;[;`;", 
        "=%=R=W=\\=", 
        ">\">e>n>", 
        "1/1(2-2?2", 
        ":/:h;x;", 
        "<&=6=~=", 
        ">\u001f>8><>@>D>X>]>o>", 
        "394E4r4w4|4", 
        "566B6H6S6Y6e6|6%7", 
        "7:8?8D8l:5;", 
        ",080]0b0g0l0", 
        "3 3%3*3m4y4~4", 
        "7Q7V7[7", 
        ";F<n<|<", 
        "<&=<=W=r=", 
        "5 5'5O5V5i5o5", 
        "6\u001f6$6*6/656>6E6L6a6h6m6s6z6", 
        "7@7g7o7v7}7", 
        "9\u001f9C9I9P9j9", 
        "<$<0<7<><O<Y<`<w<", 
        "090x0}0", 
        "2<2p2u2", 
        "3&3+363V3_3h3u3", 
        "4#4\\4g4", 
        "5L5R5X5^5d5j5q5x5", 
        "6!6'6?6F6p6", 
        "7\u001f7$7+7V7f7", 
        ":D:V:a:y:", 
        ";$</<;<i<", 
        "24282<2@2D2", 
        "2'3L3e3", 
        "7,7H7d7", 
        "7\u001f878V8r8", 
        "5%535v5", 
        "6/6K6t6", 
        ":(;-;2;O;[;k;", 
        "<#<4<><N<X<g<", 
        ">$>1>6><>", 
        "?:?F?R?W?\\?", 
        "1-12171", 
        "4/44494", 
        "5\u001f6%6@6M6R6X6e6j6p6", 
        "6\"7'7,717d7p7|7", 
        "8=8B8G8L8", 
        "9\"9'9,9W9\\9a9", 
        ";#<*<9<Y<^<c<", 
        "=!=+===G=g=l=q=", 
        "> >6>C>H>c>p>u>", 
        "0'0.0=0G0U0Z0a0k0o0y0", 
        "1 131:1", 
        "2&2>2t2", 
        "2+474d4i4n4", 
        "5'5T5Y5^5u5", 
        "6(6-6?6", 
        "7 73787?7F7Y7^7f7m7", 
        "9J9O9T9|9", 
        ":(:;:G:", 
        ":\u001f;&;-;J;g;", 
        "<6<;<@<Z<", 
        ">6>=>y>", 
        "?\"?)?.?3?=?J?O?U?]?g?n?s?y?", 
        "0+060=0U0\\0", 
        "191E1r1w1|1", 
        "90969J9", 
        ":+:G:\\:a:i:~:G;a;", 
        "<&=3=K=k=y=", 
        ">4>]>j>u>", 
        "2R2W2\\2", 
        "4R4W4\\4", 
        "5/6P6g6s6", 
        "898C8h8", 
        "<8<R=g=", 
        "=4>>>W>", 
        "?\"?L?Q?V?", 
        "8(9-9?9", 
        "9&:>:G:|:", 
        ";(<F<l<u<", 
        "=F=i=r=", 
        ">!>Z>w>", 
        ">A?J?t?y?~?", 
        "090>0C0", 
        "0!1*1T1Y1^1", 
        "1(2-2?2", 
        "3*333h3m3r3", 
        "6%6V6]6w6~6", 
        "8.83888_8h8", 
        "8Q9j9s9", 
        ":\u001f:Z:c:l:", 
        "=\"=2=>=Y=i=u=", 
        "=@>F>t>y>~>", 
        "&0k0r0", 
        "181I1v1", 
        "2H2M2S2v2}2", 
        "3B3G3L3s3|3", 
        "7 7(777L7X7d7t7", 
        "8!:4:q:", 
        "<:<I<^<c<h<", 
        "2*2M2d2k2~2", 
        "273C3l3", 
        "5=5M5R5W5\\5", 
        "6\"6?6D6I6W6r6w6", 
        ":-:2:7:v:~:", 
        ":!;*;T;Y;^;", 
        "1C1H1M1", 
        "494>4C4z4", 
        "5;6S6j6", 
        "8)9L9U9p9y9", 
        "9A:J:t:y:~:", 
        "=>=J=w=|=", 
        "?;?@?E?", 
        "0P0T0X0\\0`0d0h0l0p0t0x0|0", 
        "0A1d1m1", 
        "1(2-222k2", 
        "2=3F3r3", 
        "454>4h4m4r4", 
        "5.53585", 
        ">E>a>v>", 
        "5E5H6g6", 
        "7!7@7_7~7", 
        ";$<)<.<q<y<", 
        "0r0@1Z1", 
        "51878l8", 
        "8%:+:\\:", 
        "0e031:1", 
        "21262<2L2j2o2", 
        "3H8M8_8", 
        ";M;Y;g;v;", 
        ";O<\\<y<", 
        "<Q=l=y=", 
        ">1>>>G>", 
        "0)131J1S1a1", 
        "2\"2(2<2B2K2", 
        "243R3Z3c3", 
        "4(4/444<4", 
        "6)646H6S6o6z6", 
        ":]:l:u:", 
        ";&;.;M;", 
        "<l<p<t<x<|<", 
        "=F=N=V=a=i=q=", 
        ">X>i>|>", 
        "?G?N?T?c?q?y?", 
        "0D0U0p0", 
        "272E2N2", 
        "3'303[3n3w3", 
        "4E4M4X4`4h4I5b5p5}5", 
        "6%6L6Z6{6", 
        "8#898J8u8", 
        ":*:=:Y:", 
        "979D9k;", 
        "4 595A5G5X5j5y5", 
        "7/8=8E8K8T8Z8t8{8", 
        "9C9K9Z9c9i9w9", 
        ";$;.;@;R;];e;", 
        ">(>,>0>4>8><>@>D>H>L>P>T>X>\\>`>d>h>", 
        ">(?,?0?4?8?<?@?D?H?l?y?", 
        "G0S0h0", 
        "091J1Y1b1", 
        "1t2x2|2", 
        "3R3[3l3", 
        "314K4R4q4", 
        "4'50555O5V5\\5e5", 
        "5*636:6b6k6", 
        "687<7@7D7H7L7P7T7X7", 
        "8'8,8]8", 
        ":);:;E;N;", 
        "<,<5<O<V<g<y<", 
        "=N=h=q=", 
        ">;>r>y>", 
        "?P?e?|?", 
        "0 0$0(0,0004080", 
        "1%1-1G1N1T1]1b1w1", 
        "14282<2@2D2H2L2P2", 
        "3%363E3c3o3x3", 
        "4,4S4`4n4", 
        "5=7i8z8", 
        ":\":0:9:l:u:", 
        ";Y;g;p;", 
        "=2>;>c>p>y>L?j?", 
        "3(3C3]3j3r3", 
        "869C9K9]9j9", 
        "<&<F<f<", 
        "=4=B=V=~=", 
        "6)6i7>=4?", 
        "H1M1_1x1", 
        "969;9@9", 
        ":B:G:L:", 
        "=;=@=E=n=", 
        ">8>=>B>", 
        ">)?5?b?g?l?", 
        "4#4(4M4V4", 
        "5A5F5K5", 
        "8J8O8T8y8", 
        "8@9L9y9~9", 
        ";4;9;>;", 
        "<9<><C<l=", 
        ";2<><k<p<u<", 
        "<2=>=k=p=u=", 
        ">+?0?5?w?", 
        "171<1A1", 
        "1+2}2+343^3c3h3", 
        "6!6a7m7", 
        "9\"9O9T9Y9X:d:", 
        ":T;[;e;y;", 
        "<F<O<y<~<", 
        "= =.=C=W=]=l=", 
        ">!>Q>V>[>", 
        "6O7V7~7", 
        "74=8=<=@=D=H=L=P=T=X=\\=`=d=h=", 
        "\u001f0+0X0]0b0", 
        "3\"3@3b3", 
        "484=4O4", 
        "7F7T7b7x7", 
        "888D8P8f8", 
        "9>9C9H9n9", 
        ":6;S;p;", 
        ";H<M<_<", 
        "=W=b=x=}=", 
        "1R1W1\\1", 
        "2G2L2Q2", 
        "4 4X4]4b4", 
        "525>5v5{5", 
        "5'6,616l6", 
        "61767;7v7", 
        "9>9H9`9", 
        ":::V:t:", 
        ";#<l<%=X=", 
        "?&?B?`?", 
        "3\"3)3.333=3J3O3U3]3g3n3s3y3", 
        "4+464=4U4\\4", 
        "5A5F5K5", 
        "5\"646z6", 
        "7>7C7H7", 
        "0@6D6H6L6P6T6X6\\6`6d6h6l6p6t6", 
        ":\u001f;+;X;];b;", 
        "<2<X?g?", 
        "K0W0^0", 
        "0:1C1m1r1w1", 
        "1\"2)2h2q2", 
        "4+444^4c4h4", 
        "6<6h6m6", 
        "7,888e8j8o8", 
        "9\"9O9T9Y9", 
        "0H0j0t0", 
        ": :$:(:,:0:4:m;v;", 
        "0%0O0T0Y0", 
        "3=3B3G3", 
        "384=4O4|4", 
        "4*5/545f5r5", 
        ":-:2:7:`:A;", 
        "<><H<j<", 
        "525A5d5", 
        "5`6d6h6l6p6t6x6|6", 
        ":B:G:L:", 
        ";*<3<]<b<g<", 
        "> >%>N>W>", 
        "?4?9?>?t?}?", 
        "181D1q1v1{1", 
        "2I2N2S2", 
        "767;7@7", 
        "8*9/949", 
        "9,:1:6:", 
        "\"0'0,0", 
        "8 8$8(8,8084888<8@8D8H8L8P8h8l8p8t8x8", 
        "8L='>3>c>h>m>", 
        "*060f0k0p0", 
        "3I3N3S3", 
        "41464;4", 
        "4)555e5j5o5:6A6R7^7", 
        "86:B:r:w:|:m;y;", 
        "1-22272", 
        "3'3W3\\3a3+474g4l4q4", 
        "6'6W6\\6a6+777g7l7q7", 
        "7^8 9,9\\9a9f90:<:l:q:v:", 
        ";M;R;W;C<O<", 
        ">+?0?5?k?w?", 
        "0;0B0z0", 
        "252:2?2", 
        "3E3J3O3-494i4n4s4=5I5y5~5", 
        "=2=7=<=", 
        ">B>G>L>", 
        "6`6d6h6l6p6t6x6|6", 
        "7 7$7(7d7h7l7p7t7x7|7", 
        "2%2U2Z2_2;3", 
        "9L:P:T:X:\\:`:d:h:l:p:t:x:|:", 
        "0C0H0M0", 
        "0!2Y2w3", 
        "8'8W8\\8a8", 
        ";=;B;G;", 
        ">J>O>T> ?,?\\?a?f?", 
        "6)7.737", 
        "8;8@8E8", 
        ":\u001f:O:T:Y:", 
        ";$;T;Y;^;", 
        "2C2H2M2", 
        "3%3U3Z3_3L4X4", 
        ";&<+<0<", 
        "3 4$4(4,4044484<4@4D4H4L4P4T4l4p4t4x4|4", 
        "4$5(5,5054585<5", 
        "787=7B7", 
        "9-9F9Q9h9m9", 
        ">%>O>T>Y>", 
        ">&?+?0?", 
        "\"0+0U0Z0_0", 
        "1(2K2T2", 
        "6H7M7_7", 
        "718T8]8", 
        ";9;Z;t;", 
        "=B=G=L=c=", 
        "1+242^2c2h2", 
        "8@8E8J8", 
        ">H>Q>{>", 
        "162>2]2g2", 
        "3#4(4-4", 
        "505P5p5", 
        "8N<T<Z<`<f<l<r<x<~<", 
        "= =&=,=2=8=>=D=J=P=V=\\=b=h=n=t=z=", 
        ">\">(>.>4>:>@>F>", 
        "4\"5J5a5i5", 
        "/747>7", 
        "8 868@8V8x8", 
        "969@9V9", 
        "9&:F:f:", 
        "2 2$2(2,283<3D3H3L3\\6`6d6h6p7|:", 
        "<4@4H4L4", 
        "9(9,9094989<9@9D9H9L9P9T9X9\\9`9d9t9x9", 
        "? ?$?(?,?", 
        "0L1P1T1X1\\1`1d1", 
        "1$2(2,2024282<2@2D2H2L2P2T2X2,3034383<3@3D3H3L3P3T3X3\\3`3d3", 
        "$6(6,6D6H6L6P6T6X6\\6`6d6", 
        "7 7$7(7,7", 
        "=`=h=l=p=t=x=|=", 
        "<$<,<4<<<D<L<T<\\<d<l<t<", 
        "1 1(10181@1H1P1X1`1h1p1x1", 
        "2 2(20282@2H2P2X2`2h2p2x2", 
        "3 3(30383@3H3P3X3", 
        "< <$<(<,<0<4<8<<<@<D<H<L<P<T<X<\\<`<d<h<l<p<t<x<|<", 
        "= =$=(=,=0=4=8=", 
        "4080L0T0X0\\0d0|0", 
        "1$1<1@1T1X1l1t1x1|1", 
        "2$2<2H2`2x2|2", 
        "3,303D3H3\\3d3h3l3p3t3", 
        "4,44484@4X4d4|4", 
        "5 585@5D5H5\\5`5t5x5", 
        "6$6<6D6X6\\6p6t6", 
        "7,787P7h7p7t7", 
        "8 8$84888H8L8P8X8p8", 
        "9,9<9@9D9X9\\9l9p9", 
        ": :$:(:,:4:L:\\:`:p:t:x:", 
        "; ;(;@;P;T;d;h;l;t;", 
        "7$7D7L7T7`7", 
        "808<8`8l8", 
        "949H9P9l9t9", 
        ":<:H:l:x:", 
        ";$;D;L;T;\\;d;l;|;", 
        "; <,<P<\\<", 
        "=$=(=,=0=<=P=\\=p=|=", 
        "=$>8>@>\\>d>", 
        "?$?H?T?|?", 
        "040X0d0l0", 
        "0$141`1h1", 
        "2$2H2P2\\2h2", 
        "383@3H3P3X3h3l3|3", 
        "4,484\\4d4p4t4", 
        "5 5D5P5|5", 
        "6$6,646<6@6D6L6`6h6p6x6|6", 
        "787D7d7l7x7", 
        "9 9@9`9", 
        ":(:H:h:", 
        ";(;H;h;", 
        "< <@<H<L<h<p<t<", 
        "=,=0=L=P=`=", 
        ">8>D>P>p>|>", 
        "? ?@?`?h?t?", 
        "0(0H0h0", 
        "181X1x1", 
        "282X2x2", 
        "3 3,3H3h3", 
        "404P4p4", 
        "3(3L3t3", 
        "5<5@7`7p7x7", 
        ":X:x:|:", 
        "0 0$0(0,0004080<0@0D0H0L0P0T0X0\\0`0d0h0l0p0t0x0|0", 
        "1 1$1(1,1014181", 
        "4 4$4(4,4044484<4@4D4H4L4P4T4X4\\4`4d4", 
        "@999@@999@VFZxUUFBTUFBQUFFQUFBQS8vOEFBTGdBQUFBQUFBQUFRQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFnQUFBQUE0ZnVnNEF0QW5OSWJnQlRNMGhWR2hwY3lCd2NtOW5jbUZ0SUdOaGJtNXZkQ0JpWlNCeWRXNGdhVzRnUkU5VElHMXZaR1V1RFEwS0pBQUFBQUFBQUFCUVJRQUFUQUVGQU5BLzBsVUFBQUFBQUFBQUFPQUFEd01MQVFJNEFBWUFBQUFNQUFBQUFnQUFNQkVBQUFBUUFBQUFJQUFBQUFCQUFBQVFBQUFBQWdBQUJBQUFBQUVBQUFBRUFBQUFBQUFBQUFCZ0FBQUFCQUFBY0tFQUFBTUFBQUFBQUNBQUFCQUFBQUFBRUFBQUVBQUFBQUFBQUJBQUFBQUFBQUFBQUFBQUFBQlFBQUR3QVFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQzUwWlhoMEFBQUFwQVVBQUFBUUFBQUFCZ0FBQUFRQUFBQUFBQUFBQUFBQUFBQUFBR0FBVUdBdVpHRjBZUUFBQUJBQUFBQUFJQUFBQUFJQUFBQUtBQUFBQUFBQUFBQUFBQUFBQUFCQUFEREFMbkprWVhSaEFBQWtBQUFBQURBQUFBQUNBQUFBREFBQUFBQUFBQUFBQUFBQUFBQUFRQUF3UUM1aWMzTUFBQUFBUkFBQUFBQkFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUlBQVFNQXVhV1JoZEdFQUFQQUJBQUFBVUFBQUFBSUFBQUFPQUFBQUFBQUFBQUFBQUFBQUFBQkldMRGNCUVFBQ0o1VjMvNFkxMEpnQlZpdzI0VUVBQWllVmQvK0dOZENZQVZZbmxVNFBzSUdoUUVVQUE2QjhGQUFDRHhBem8xd0lBQU9qeUF3QUFnK3dNalVYMHgwWDBBQUFBQUZDTlJmaUxIUUFnUUFCVFVHZ0VRRUFBYUFCQVFBRG91Z1FBQUtFSVFFQUFnOFFnaGNCMVJPaTVCQUFBaXhVRUlFQUFpUkRvdkFNQUFJUGs4T2gwQkFBQTZLOEVBQUJUaXdoUml4VUVRRUFBVXFFQVFFQUFVT2hKQWdBQWljUG9tZ1FBQUlrY0pPaWlCQUFBaXgyMFVFQUFvd1FnUUFCUlVWQ0xVeEJTNkZzRUFBQ0R4QkNEKytCMEdWQlFvUWhBUUFCUWkwTXdVT2hDQkFBQWc4UVFnL3ZBZElSUVVLRUlRRUFBVUl0RFVGRG9LUVFBQUlQRUVPbHIvLy8vaWZhTnZDY0FBQUFBVllubGcrd1VhZ0wvRmF4UVFBRG8vZjcvLzQyMkFBQUFBSTI4SndBQUFBQlZpZVdEN0JScUFmOFZyRkJBQU9qZC92Ly9qYllBQUFBQWpid25BQUFBQUZXSjVWT0Q3QVNMUlFpTEFJc0FQWkVBQU1CM096Mk5BQURBY2t1N0FRQUFBRkJRYWdCcUNPaThBd0FBZzhRUWcvZ0JENFRXQUFBQWhjQVBoWkFBQUFBeHdJdGQvTW5DQkFDTnRDWUFBQUFBUFpRQUFNQjBTVDJXQUFEQWRCYzlrd0FBd0hYYjY3VTlCUUFBd0hRNVBSMEFBTUIxeTFCUWFnQnFCT2hvQXdBQWc4UVFnL2dCZEZxRndIUzBnK3dNYWdULzBJUEkvNFBFRU91bmtJMTBKZ0F4MitsNi8vLy9VRkJxQUdvTDZEWURBQUNEeEJDRCtBRjBQb1hBZElLRDdBeHFDLy9RZzhqL2c4UVE2WEwvLy8rRDdBeHFDUC9RZzhqL2c4UVE2V0QvLy85UVVHb0JhZ1RvK3dJQUFJUEkvNFBFRU9sSy8vLy9VRkJxQVdvTDZPVUNBQUNEeVArRHhCRHBOUC8vLzFCUWFnRnFDT2pQQWdBQWc4UVFnOGovaGRzUGhCdi8vLy9vdEFFQUFJUEkvK2tPLy8vL2tKQ1FrSkNRa0pDUWtKQ1FWWW5sZyt3WW9Rd2dRQUNGd0hRM3h3UWtBREJBQU9pMUFnQUFpY0s0QUFBQUFGR0YwblFTaVJRa3gwUWtCQTB3UUFEb29RSUFBRkpTaGNCMENjY0VKQXdnUUFELzBNbkRrSTIwSmdBQUFBQlZpZVZkdzVDUWtKQ1FrSkNRa0pDUVZZbmxnK1R3NkFVQ0FBQ0o3REhBWGNPUWtKQ1FrSkNRa0pDUWtKQ1FrSkJWaWVWVG5KeGFpZENCOGdBQUlBQlNuWnhhblRIUXFRQUFJQUFQaE9FQUFBQXh3QStpaGNBUGhOVUFBQUM0QVFBQUFBK2k5c1lCZEErTEhReEFRQUNEeXdHSkhReEFRQUJtaGRKNURhRU1RRUFBZzhnQ293eEFRQUQzd2dBQWdBQjBEYUVNUUVBQWc4Z0Vvd3hBUUFEM3dnQUFBQUYwRGFFTVFFQUFnOGdJb3d4QVFBRDN3Z0FBQUFKMERhRU1RRUFBZzhnUW93eEFRQUNCNGdBQUFBUjBEYUVNUUVBQWc4Z2dvd3hBUUFEMndRRjBEYUVNUUVBQWc4aEFvd3hBUUFDQTVTQjBENHNkREVCQUFJRExnSWtkREVCQUFMZ0FBQUNBRDZJOUFBQUFnSFlndUFFQUFJQVBvb1hTZUJpQjRnQUFBRUIwRGFFTVFFQUFnTXdDb3d4QVFBQmJYY09MRFF4QVFBQ0F6UUdKRFF4QVFBRHIxNUNRa0pDUWtKQ1FrSkJWaWVYYjQxM0RrSkNRa0pDUWtKQ1FWYmtrTUVBQWllV0IrU1F3UUFCekdJdFJCSXNCZ2NJQUFFQUFnOEVJQVFLQitTUXdRQUJ5NkYzRGtKQ1FrSkNRVllubGcrd0lvUWdnUUFDTEFJWEFkQlgvMEtFSUlFQUFnOEFFb3dnZ1FBQ0xBSVhBZGV2Snc1Q050Q1lBQUFBQVZhR1FGVUFBaWVXRCtQOVdVM1F3aGNCMEZZMDBoWkFWUUFDSnc0MTBKZ0QvRm9QdUJFdDErSVBzREdod0ZFQUE2Q3Y3Ly8rRHhCQ05aZmhiWGwzRE1jRHJBb25RalZBQml3eVZrQlZBQUlYSmRmRHJ1bzEwSmdDTnZDY0FBQUFBVmFFUVFFQUFpZVdGd0hRRVhjTm1rTWNGRUVCQUFBRUFBQUJkNjRPUWtKRC9KYUJRUUFDUWtQOGx2RkJBQUpDUS95V29VRUFBa0pEL0pjUlFRQUNRa1A4bHBGQkFBSkNRL3lXd1VFQUFrSkQvSlpSUVFBQ1FrUDhsaUZCQUFKQ1EveVdNVUVBQWtKRC9KWkJRUUFDUWtGV0o1WVBzR09nVi9mLy94d1FrNEJKQUFPaDUrdi8veWNPUWtKQ1FrSkNRLy8vLy8zQVZRQUFBQUFBQS8vLy8vd0FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFQLy8vLzhBUUFBQW9CVkbGlaMk5xWDNNdVpHeHNBRjlLZGw5U1pXZHBjM1JsY2tOc1lYTnpaaUZBQUFGaFFBQUFBQUFBQUFBQUFBT1JSQUFDZ1VBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQXpGQUFBTnBRQUFEdVVBQUFBRkVBQUFBQUFBQUFBQUFBSGxFQUFDNVJBQUErVVFBQVRGRUFBRjVSQUFCb1VRQUFjRkVBQUhwUkFBQ0dVUUFBa0ZFQUFBQUFBQUFBQUFBQXpGQUFBTnBRQUFEdVVBQUFBRkVBQUFBQUFBQUFBQUFBSGxFQUFDNVJBQUErVVFBQVRGRUFBRjVSQUFCb1VRQUFjRkVBQUhwUkFBQ0dVUUFBa0ZFQUFBQUFBQUNjQUVWNGFYUlFjbTlqWlhOekFGRUJSMlYwVFc5a2RXeGxTR0Z1Wkd4bFFRQUFiQUZIWlhSUWNtOWpRV1JrY21WemN3QUE0d0pUWlhSVmJtaGhibVJzWldSRmVHTmxjSFJwYjI1R2FXeDBaWElBTndCZlgyZGxkRzFoYVc1aGNtZHpBRTBBWDE5d1gxOWxiblpwY205dUFBQlBBRjlmY0Y5ZlptMXZaR1VBQUdNQVgxOXpaWFJmWVhCd1gzUjVjR1VBQUpNQVgyTmxlR2wwQUFBS0FWOXBiMklBQUg4QlgyOXVaWGhwZEFDcUFWOXpaWFJ0YjJSbEFBQk9BbUYwWlhocGRBQUF3Z0p6YVdkdVlXd0FBQUFBQUZBQUFBQlFBQUFBVUFBQUFGQUFBRXRGVWs1RlRETXlMbVJzYkFBQUFBQVVVQUFBRkZBQUFCUlFBQUFVVUFBQUZGQUFBQlJRQUFBVVVBQUFGRkFBQUJSUUFBQVVVQUFBYlhOMlkzSjBMbVJzYkFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUE9PQ==", 
        "c:\\program files\\microsoft visual studio 10.0\\vc\\include\\xstring", 
        "string subscript out of range", 
        "c:\\program files\\microsoft visual studio 10.0\\vc\\include\\ostream", 
        "c:\\program files\\microsoft visual studio 10.0\\vc\\include\\istream", 
        "\"out of range\"", 
        "std::vector<class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class std::allocator<class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > > >::operator []", 
        "\"Standard C++ Libraries Out of Range\" && 0", 
        "vector subscript out of range", 
        "c:\\program files\\microsoft visual studio 10.0\\vc\\include\\vector", 
        "ITERATOR LIST CORRUPTED!", 
        "c:\\program files\\microsoft visual studio 10.0\\vc\\include\\xutility", 
        "std::_String_const_iterator<char,struct std::char_traits<char>,class std::allocator<char> >::operator *", 
        "string iterator not dereferencable", 
        "c:\\program files\\microsoft visual studio 10.0\\vc\\include\\xlocale", 
        "invalid null pointer", 
        "invalid iterator range", 
        "c:\\program files\\microsoft visual studio 10.0\\vc\\include\\memory", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\xstring", 
        "_get_errno", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\dosmap.c", 
        "pValue != NULL", 
        "_get_doserrno", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\dbgdel.cpp", 
        "_BLOCK_TYPE_IS_VALID(pHead->nBlockUse)", 
        "Assertion Failed", 
        "Warning", 
        "(\"The hook function is not in the list!\",0)", 
        "pfnNewHook != NULL", 
        "_CrtSetReportHookW2", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\dbgrpt.c", 
        "mode == _CRT_RPTHOOK_INSTALL || mode == _CRT_RPTHOOK_REMOVE", 
        "Microsoft Visual C++ Debug Library", 
        "_CrtDbgReport: String too long or IO Error", 
        "wcscpy_s(szOutMessage, 4096, L\"_CrtDbgReport: String too long or IO Error\")", 
        "(*_errno())", 
        "Debug %s!", 
        "Program: %s%s%s%s%s%s%s%s%s%s%s%s", 
        "(Press Retry to debug the application)", 
        "Module: ", 
        "File: ", 
        "Line: ", 
        "Expression: ", 
        "For information on how your program can cause an assertion", 
        "failure, see the Visual C++ documentation on asserts.", 
        "memcpy_s(szShortProgName, sizeof(TCHAR) * (260 - (szShortProgName - szExeName)), dotdotdot, sizeof(TCHAR) * 3)", 
        "<program name unknown>", 
        "wcscpy_s(szExeName, 260, L\"<program name unknown>\")", 
        "__crtMessageWindowW", 
        "fwrite", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\fwrite.c", 
        "(stream != NULL)", 
        "(\"Inconsistent Stream Count. Flush between consecutive read and write\", stream->_cnt >= 0)", 
        "num <= (SIZE_MAX / size)", 
        "(buffer != NULL)", 
        "_fwrite_nolock", 
        "( (_Stream->_flag & _IOSTRG) || ( fn = _fileno(_Stream), ( (_textmode_safe(fn) == __IOINFO_TM_ANSI) && !_tm_unicode_safe(fn))))", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\fputc.c", 
        "(str != NULL)", 
        "ungetc", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\ungetc.c", 
        "_ungetc_nolock", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\ungetc_nolock.inl", 
        "sizeInBytes >= count", 
        "src != NULL", 
        "memcpy_s", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\memcpy_s.c", 
        "dst != NULL", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\fgetc.c", 
        "(pos != NULL)", 
        "fgetpos", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\fgetpos.c", 
        "((whence == SEEK_SET) || (whence == SEEK_CUR) || (whence == SEEK_END))", 
        "_fseeki64", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\fseeki64.c", 
        "str != NULL", 
        "fsetpos", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\fsetpos.c", 
        "((2 <= size) && (size <= INT_MAX))", 
        "(type == _IONBF) || (type == _IOFBF) || (type == _IOLBF)", 
        "setvbuf", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\setvbuf.c", 
        "Afclose", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\fclose.c", 
        "_fclose_nolock", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\dbgheap.c", 
        "_CrtCheckMemory()", 
        "_pFirstBlock == pOldBlock", 
        "_pLastBlock == pOldBlock", 
        "fRealloc || (!fRealloc && pNewBlock == pOldBlock)", 
        "pOldBlock->nLine == IGNORE_LINE && pOldBlock->lRequest == IGNORE_REQ", 
        "_CrtIsValidHeapPointer(pUserData)", 
        "_expand_dbg", 
        "pUserData != NULL", 
        "_pFirstBlock == pHead", 
        "_pLastBlock == pHead", 
        "pHead->nBlockUse == nBlockUse", 
        "pHead->nLine == IGNORE_LINE && pHead->lRequest == IGNORE_REQ", 
        "_msize_dbg", 
        "_CrtSetDbgFlag", 
        "(fNewBits==_CRTDBG_REPORT_FLAG) || ((fNewBits & 0x0ffff & ~(_CRTDBG_ALLOC_MEM_DF | _CRTDBG_DELAY_FREE_MEM_DF | _CRTDBG_CHECK_ALWAYS_DF | _CRTDBG_CHECK_CRT_DF | _CRTDBG_LEAK_CHECK_DF) ) == 0)", 
        "_CrtDoForAllClientObjects", 
        "pfn != NULL", 
        "_CrtMemCheckpoint", 
        "state != NULL", 
        "newState != NULL", 
        "oldState != NULL", 
        "_CrtMemDifference", 
        "_printMemBlockData", 
        "_CrtMemDumpStatistics", 
        "offset == 0 || offset < size", 
        "_aligned_offset_malloc_dbg", 
        "IS_2_POW_N(align)", 
        "_aligned_offset_realloc_dbg", 
        "_aligned_msize_dbg", 
        "memblock != NULL", 
        "strcpy_s(errmsg, (94+38+2), _get_sys_err_msg(errnum))", 
        "strerror", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\strerror.c", 
        ".strncpy_s(buffer, sizeInTChars, _get_sys_err_msg(errnum), sizeInTChars - 1)", 
        "sizeInTChars > 0", 
        "strerror_s", 
        "buffer != NULL", 
        "(*mode != _T('\\0'))", 
        "(mode != NULL)", 
        "_fsopen", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\fopen.c", 
        "(file != NULL)", 
        "fopen_s", 
        "(pfile != NULL)", 
        "_wfsopen", 
        "_wfopen_s", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\fseek.c", 
        "_configthreadlocale", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\setlocal.c", 
        "(\"Invalid parameter for _configthreadlocale\",0)", 
        "setlocale", 
        "LC_MIN <= _category && _category <= LC_MAX", 
        "strncpy_s(lctemp, (sizeof(lctemp) / sizeof(lctemp[0])), s, len)", 
        "_setlocale_nolock", 
        "strcpy_s(pch + sizeof(int), cch - sizeof(int), lctemp)", 
        "_setlocale_set_cat", 
        "strcat_s(pch, cch, \";\")", 
        "_setlocale_get_all", 
        "strcpy_s(output, sizeInChars, cacheout)", 
        "strncpy_s(cachein, cacheinSize, source, charactersInSource + 1)", 
        "strcpy_s(output, sizeInChars, \"C\")", 
        "_expandlocale", 
        "strcat_s(outstr, sizeInBytes, ( *(char * *)((substr += ( (sizeof(char *) + sizeof(int) - 1) & ~(sizeof(int) - 1) )) - ( (sizeof(char *) + sizeof(int) - 1) & ~(sizeof(int) - 1) )) ))", 
        "_strcats", 
        "strncpy_s(names->szCodePage, (sizeof(names->szCodePage) / sizeof(names->szCodePage[0])), locale, len)", 
        "strncpy_s(names->szCountry, (sizeof(names->szCountry) / sizeof(names->szCountry[0])), locale, len)", 
        "strncpy_s(names->szLanguage, (sizeof(names->szLanguage) / sizeof(names->szLanguage[0])), locale, len)", 
        ",strncpy_s(names->szCodePage, (sizeof(names->szCodePage) / sizeof(names->szCodePage[0])), &locale[1], 16-1)", 
        "__lc_strtolc", 
        "strcpy_s(locale, sizeInBytes, (char *)names->szLanguage)", 
        "__lc_lctostr", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\malloc.h", 
        "(\"Corrupted pointer passed to _freea\", 0)", 
        "         (((((                  H", 
        "         h((((                  H", 
        "                                 H", 
        "ploci->ctype1_refcount > 0", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\initctyp.c", 
        "KERNEL32.DLL", 
        "Run-Time Check Failure #%d - %s", 
        "Runtime Check Error.", 
        " Unable to display RTC Message.", 
        "user32.dll", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\isctype.c", 
        "(unsigned)(c + 1) <= 256", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\localref.c", 
        "((ptloci->lc_category[category].wlocale != NULL) && (ptloci->lc_category[category].wrefcount != NULL)) || ((ptloci->lc_category[category].wlocale == NULL) && (ptloci->lc_category[category].wrefcount == NULL))", 
        "HH:mm:ss", 
        "dddd, MMMM dd, yyyy", 
        "MM/dd/yy", 
        "December", 
        "November", 
        "October", 
        "September", 
        "August", 
        "February", 
        "January", 
        "Saturday", 
        "Friday", 
        "Thursday", 
        "Wednesday", 
        "Tuesday", 
        "Monday", 
        "Sunday", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\prebuild\\eh\\typname.cpp", 
        "pNode->_Next != NULL", 
        "strcpy_s ((char *)((type_info *)_This)->_M_data, len+2, (char *)pTmpUndName)", 
        "type_info::_Name_base", 
        "strcpy_s (pTmpTypeName, len+2, (char *)pTmpUndName)", 
        "type_info::_Name_base_internal", 
        "fMode == _CRTDBG_REPORT_MODE || (fMode & ~(_CRTDBG_MODE_FILE | _CRTDBG_MODE_DEBUG | _CRTDBG_MODE_WNDW)) == 0", 
        "_CrtSetReportMode", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\dbgrptt.c", 
        "nRptType >= 0 && nRptType < _CRT_ERRCNT", 
        "_CrtSetReportFile", 
        "_CrtDbgReport: String too long or Invalid characters in String", 
        "wcscpy_s(szOutMessage2, 4096, L\"_CrtDbgReport: String too long or Invalid characters in String\")", 
        "e = mbstowcs_s(&ret, szOutMessage2, 4096, szOutMessage, ((size_t)-1))", 
        "strcpy_s(szOutMessage, 4096, szLineMessage)", 
        "strcpy_s(szOutMessage, 4096, \"_CrtDbgReport: String too long or IO Error\")", 
        "strcat_s(szLineMessage, 4096, \"\\n\")", 
        "strcat_s(szLineMessage, 4096, \"\\r\")", 
        "strcat_s(szLineMessage, 4096, szUserMessage)", 
        "strcpy_s(szLineMessage, 4096, szFormat ? \"Assertion failed: \" : \"Assertion failed!\")", 
        "strcpy_s(szUserMessage, 4096, \"_CrtDbgReport: String too long or IO Error\")", 
        "_itoa_s(nLine, szLineMessage, 4096, 10)", 
        "_VCrtDbgReportA", 
        "wcstombs_s(&ret, szaOutMessage, 4096, szOutMessage, ((size_t)-1))", 
        "strcpy_s(szOutMessage2, 4096, \"_CrtDbgReport: String too long or Invalid characters in String\")", 
        "wcstombs_s(((void *)0), szOutMessage2, 4096, szOutMessage, ((size_t)-1))", 
        "wcscpy_s(szOutMessage, 4096, szLineMessage)", 
        "%s(%d) : %s", 
        "wcscat_s(szLineMessage, 4096, L\"\\n\")", 
        "wcscat_s(szLineMessage, 4096, L\"\\r\")", 
        "wcscat_s(szLineMessage, 4096, szUserMessage)", 
        "wcscpy_s(szLineMessage, 4096, szFormat ? L\"Assertion failed: \" : L\"Assertion failed!\")", 
        "Assertion failed!", 
        "Assertion failed: ", 
        "wcscpy_s(szUserMessage, 4096, L\"_CrtDbgReport: String too long or IO Error\")", 
        ", Line ", 
        "<file unknown>", 
        "Second Chance Assertion Failed: File ", 
        "_itow_s(nLine, szLineMessage, 4096, 10)", 
        "_VCrtDbgReportW", 
        "mscoree.dll", 
        "_wpgmptr != NULL", 
        "_get_wpgmptr", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\crt0dat.c", 
        "_pgmptr != NULL", 
        "_get_pgmptr", 
        "signal", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\winsig.c", 
        "(\"Invalid signal or error\", 0)", 
        "craise", 
        "WUSER32.DLL", 
        "(string != NULL)", 
        "_swprintf", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\swprintf.c", 
        "(format != NULL)", 
        "(L\"Buffer is too small\" && 0)", 
        "Buffer is too small", 
        "(((_Src))) != NULL", 
        "wcscpy_s", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\tcscpy_s.inl", 
        "((_Dst)) != NULL && ((_SizeInWords)) > 0", 
        "(\"inconsistent IOB fields\", stream->_ptr - stream->_base >= 0)", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\_flsbuf.c", 
        "(\"Invalid file descriptor. File possibly closed by a different thread\",0)", 
        "(_osfile(fh) & FOPEN)", 
        "_write", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\write.c", 
        "(fh >= 0 && (unsigned)fh < (unsigned)_nhandle)", 
        "isleadbyte(_dbcsBuffer(fh))", 
        "((cnt & 1) == 0)", 
        "_write_nolock", 
        "(buf != NULL)", 
        "_fileno", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\fileno.c", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\_getbuf.c", 
        "_filbuf", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\_filbuf.c", 
        "_ftelli64", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\ftelli64.c", 
        "_lseeki64", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\lseeki64.c", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\_freebuf.c", 
        "stream != NULL", 
        "(_osfile(filedes) & FOPEN)", 
        "_commit", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\commit.c", 
        "(filedes >= 0 && (unsigned)filedes < (unsigned)_nhandle)", 
        "strcpy_s", 
        "((_Dst)) != NULL && ((_SizeInBytes)) > 0", 
        "_close", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\close.c", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\handler.cpp", 
        "pnh == 0", 
        "G_CrtSetReportHook2", 
        "strcpy_s(szExeName, 260, \"<program name unknown>\")", 
        "__crtMessageWindowA", 
        "_expand_base", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\expand.c", 
        "pBlock != NULL", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\heapinit.c", 
        "_crtheap", 
        "sprintf", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\sprintf.c", 
        "strcpy_s(*env, cchars, p)", 
        "_setenvp", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\stdenvp.c", 
        "runtime error ", 
        "TLOSS error", 
        "SING error", 
        "DOMAIN error", 
        "- Attempt to use MSIL code from this assembly during native code initialization", 
        "This indicates a bug in your application. It is most likely the result of calling an MSIL-compiled (/clr) function from a native constructor or from DllMain.", 
        "- not enough space for locale information", 
        "- Attempt to initialize the CRT more than once.", 
        "This indicates a bug in your application.", 
        "- CRT not initialized", 
        "- unable to initialize heap", 
        "- not enough space for lowio initialization", 
        "- not enough space for stdio initialization", 
        "- pure virtual function call", 
        "- not enough space for _onexit/atexit table", 
        "- unable to open console device", 
        "- unexpected heap error", 
        "- unexpected multithread lock error", 
        "- not enough space for thread data", 
        "- abort() has been called", 
        "- not enough space for environment", 
        "- not enough space for arguments", 
        "- floating point support not loaded", 
        "GMicrosoft Visual C++ Runtime Library", 
        "wcscat_s(outmsg, (sizeof(outmsg) / sizeof(outmsg[0])), error_text)", 
        "wcscat_s(outmsg, (sizeof(outmsg) / sizeof(outmsg[0])), L\"\\n\\n\")", 
        "wcsncpy_s(pch, progname_size - (pch - progname), L\"...\", 3)", 
        "wcscpy_s(progname, progname_size, L\"<program name unknown>\")", 
        "Runtime Error!", 
        "Program: ", 
        "wcscpy_s(outmsg, (sizeof(outmsg) / sizeof(outmsg[0])), L\"Runtime Error!\\n\\nProgram: \")", 
        "_NMSG_WRITE", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\crt0msg.c", 
        "strncpy_s(*straddress, outsize, pcbuffer, outsize - 1)", 
        "__getlocaleinfo", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\inithelp.c", 
        "strncpy_s", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\tcsncpy_s.inl", 
        "E(*mode == _T('\\0'))", 
        "_openfile", 
        "(\"Invalid file open mode\",0)", 
        "mode != NULL", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\_open.c", 
        "filename != NULL", 
        "UTF-16LE", 
        "UNICODE", 
        "_wopenfile", 
        "_lseek", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\lseek.c", 
        "(\"Invalid file descriptor\",0)", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\ftell.c", 
        "_ftell_nolock", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\inittime.c", 
        "ploci->lc_time_curr->refcount > 0", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\initnum.c", 
        "ploci->lconv_num_refcount > 0", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\initmon.c", 
        "ploci->lconv_mon_refcount > 0", 
        "(L\"String is not null terminated\" && 0)", 
        "String is not null terminated", 
        "strcat_s", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\tcscat_s.inl", 
        "strcpy_s(lpOutStr->szLanguage, (sizeof(lpOutStr->szLanguage) / sizeof(lpOutStr->szLanguage[0])), \"Norwegian-Nynorsk\")", 
        "__get_qualified_locale", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\getqloc.c", 
        "PMSPDB100.DLL", 
        "EnvironmentDirectory", 
        "SOFTWARE\\Microsoft\\VisualStudio\\10.0\\Setup\\VS", 
        "ADVAPI32.DLL", 
        "C_mbstowcs_l_helper", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\mbstowcs.c", 
        "s != NULL", 
        "retsize <= sizeInWords", 
        "bufferSize <= INT_MAX", 
        "_mbstowcs_s_l", 
        "(pwcs == NULL && sizeInWords == 0) || (pwcs != NULL && sizeInWords > 0)", 
        "(count == 0) || (string != NULL)", 
        "_vsnprintf_helper", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\vsprintf.c", 
        "(\"Buffer too small\", 0)", 
        "string != NULL && sizeInBytes > 0", 
        "_vsprintf_s_l", 
        "format != NULL", 
        "_vsnprintf_s_l", 
        "length < sizeInTChars", 
        "2 <= radix && radix <= 36", 
        "sizeInTChars > (size_t)(is_neg ? 2 : 1)", 
        "xtoa_s", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\xtoa.c", 
        "buf != NULL", 
        "x64toa_s", 
        "_wcstombs_l_helper", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\wcstombs.c", 
        "pwcs != NULL", 
        "sizeInBytes > retsize", 
        "_wcstombs_s_l", 
        "(dst != NULL && sizeInBytes > 0) || (dst == NULL && sizeInBytes == 0)", 
        "wcscat_s", 
        "_vswprintf_helper", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\vswprint.c", 
        "string != NULL && sizeInWords > 0", 
        "_vswprintf_s_l", 
        "_vsnwprintf_s_l", 
        "xtow_s", 
        "x64tow_s", 
        "(\"rand_s is not available on this platform\", 0)", 
        "rand_s", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\rand_s.c", 
        "_RandomValue != NULL", 
        "(\"'n' format specifier disabled\", 0)", 
        "_woutput_l", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\output.c", 
        "_vswprintf_l", 
        "_vscwprintf_helper", 
        "_isatty", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\isatty.c", 
        "_get_osfhandle", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\osfinfo.c", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\mbtowc.c", 
        "_loc_update.GetLocaleT()->locinfo->mb_cur_max == 1 || _loc_update.GetLocaleT()->locinfo->mb_cur_max == 2", 
        "(cnt <= INT_MAX)", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\read.c", 
        "(inputbuf != NULL)", 
        "_read_nolock", 
        "A(null)", 
        "(ch != _T('\\0'))", 
        "_output_l", 
        "_vsprintf_l", 
        "_vscprintf_helper", 
        "_set_error_mode", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\errmode.c", 
        "(\"Invalid error_mode\", 0)", 
        "wcsncpy_s", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\open.c", 
        "(path != NULL)", 
        "((pmode & (~(_S_IREAD | _S_IWRITE))) == 0)", 
        "_sopen_helper", 
        "(pfh != NULL)", 
        "0 && \"Only UTF-16 little endian & UTF-8 is supported for reads\"", 
        "0 && \"Internal Error\"", 
        "(oflag & (_O_TEXT | _O_WTEXT | _O_U16TEXT | _O_U8TEXT) ) != 0", 
        "( \"Invalid sharing flag\" , 0 )", 
        "( \"Invalid open flag\" , 0 )", 
        "_get_fmode(&fmode)", 
        "_tsopen_nolock", 
        "s2 != NULL", 
        "_mbsnbicmp_l", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\mbsnbicm.c", 
        "s1 != NULL", 
        "_mbsnbcmp_l", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\mbsnbcmp.c", 
        "_wopen", 
        "_wsopen_helper", 
        "last != NULL", 
        "_wcsnicmp_l", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\wcsnicmp.c", 
        "first != NULL", 
        "_wcsnicmp", 
        "_stricmp_l", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\stricmp.c", 
        "_stricmp", 
        "count <= INT_MAX", 
        "_strnicmp_l", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\strnicmp.c", 
        "_strnicmp", 
        "((state == ST_NORMAL) || (state == ST_TYPE))", 
        "(\"Incorrect format specifier\", 0)", 
        "_output_s_l", 
        "(\"Missing position in the format string\", 0)", 
        "_tvalidate_param_reuse(&pos_value[type_pos], e_long_long_arg, ch, flags)", 
        "_tvalidate_param_reuse(&pos_value[type_pos], e_int64_arg, ch, flags)", 
        "pass == FORMAT_OUTPUT_PASS", 
        "_tvalidate_param_reuse(&pos_value[type_pos], e_double_arg, ch, flags)", 
        "_tvalidate_param_reuse(&pos_value[type_pos], e_ptr_arg, ch, flags)", 
        "_tvalidate_param_reuse(&pos_value[type_pos], e_int_arg, ch, flags)", 
        "_tvalidate_param_reuse(&pos_value[type_pos], e_short_arg, ch, flags)", 
        "((type_pos>=0) && (type_pos<_ARGMAX))", 
        "_tvalidate_param_reuse(&pos_value[precis_pos], e_int_arg, ch, flags)", 
        "((precis_pos >= 0) && (*end_pos == POSITION_CHAR) && (type_pos < _ARGMAX))", 
        "_tvalidate_param_reuse(&pos_value[width_pos], e_int_arg, ch, flags)", 
        "((width_pos >= 0) && (*end_pos == POSITION_CHAR) && (type_pos < _ARGMAX))", 
        "((type_pos >= 0) && (*end_pos == POSITION_CHAR) && (type_pos < _ARGMAX))", 
        "_output_p_l", 
        "_woutput_s_l", 
        "_woutput_p_l", 
        "printf", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\printf.c", 
        "fputwc", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\fputwc.c", 
        "CONOUT$", 
        "sizeInBytes > 0", 
        "_wctomb_s_l", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\wctomb.c", 
        "sizeInBytes <= INT_MAX", 
        "(size >= 0)", 
        "_chsize_s", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\chsize.c", 
        "_setmode", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\setmode.c", 
        "((mode == _O_TEXT) || (mode == _O_BINARY) || (mode == _O_WTEXT) || (mode == _O_U8TEXT) || (mode == _O_U16TEXT))", 
        "_set_fmode", 
        "((mode == _O_TEXT) || (mode == _O_BINARY) || (mode == _O_WTEXT))", 
        "_get_fmode", 
        "(pMode != NULL)", 
        "ibase == 0 || (2 <= ibase && ibase <= 36)", 
        "strtoxl", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\strtol.c", 
        "nptr != NULL", 
        "strtoxq", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\strtoq.c", 
        "wcstoxl", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\wcstol.c", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\_sftbuf.c", 
        "flag == 0 || flag == 1", 
        "vprintf_helper", 
        "f:\\dd\\vctools\\crt_bld\\self_x86\\crt\\src\\vprintf.c"
    ], 
    "network": {
        "tls": [], 
        "udp": [
            {
                "src": "192.168.57.101", 
                "dst": "192.168.57.255", 
                "offset": 24, 
                "time": 0.0, 
                "dport": 137, 
                "sport": 137
            }, 
            {
                "src": "192.168.57.101", 
                "dst": "239.255.255.250", 
                "offset": 1840, 
                "time": -5.9604644775390625e-06, 
                "dport": 1900, 
                "sport": 1045
            }
        ], 
        "icmp": [], 
        "http": [], 
        "smtp": [], 
        "tcp": [], 
        "mitm": [], 
        "hosts": [], 
        "pcap_sha256": "1147a3b7a8a3472c5d950a627aa65f331642f48b14f5b6edc78a76764e937c70", 
        "dns": [], 
        "http_ex": [], 
        "domains": [], 
        "dead_hosts": [], 
        "sorted_pcap_sha256": "54440b4239d533db136e918a0a9ecd7280379f09838fd6e43afb0421f86120ce", 
        "irc": [], 
        "https_ex": []
    }
}